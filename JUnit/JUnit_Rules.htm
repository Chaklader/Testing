<!DOCTYPE html>
<!-- saved from url=(0043)https://carlosbecker.com/posts/junit-rules/ -->
<html class="gr__carlosbecker_com"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="stylesheet" href="./JUnit_Rules_files/styles.css" type="text/css">

<link rel="apple-touch-icon-precomposed" sizes="144x144" alt="apple touch icon" href="https://carlosbecker.com/public/apple-touch-icon-144-precomposed.png">
<link rel="shortcut icon" href="https://carlosbecker.com/public/favicon.ico" alt="default favicon">

<meta name="theme-color" content="#000000">

<title>Using JUnit Rules to simplify your tests | Carlos Alexandro Becker</title>
<meta property="og:title" content="Using JUnit Rules to simplify your tests">
<meta name="author" content="Carlos Alexandro Becker">
<meta property="og:locale" content="en_US">
<meta name="description" content="Have you ever wrote JUnit tests extending a class that does some before and after work, so you didn’t have to repeat that code in various test classes? Well, I will not say that you have been doing it wrong, but, sure enough, you could do it better. How? Using JUnit Rules!">
<meta property="og:description" content="Have you ever wrote JUnit tests extending a class that does some before and after work, so you didn’t have to repeat that code in various test classes? Well, I will not say that you have been doing it wrong, but, sure enough, you could do it better. How? Using JUnit Rules!">
<link rel="canonical" href="http://carlosbecker.com/posts/junit-rules/">
<meta property="og:url" content="http://carlosbecker.com/posts/junit-rules/">
<meta property="og:site_name" content="Carlos Alexandro Becker">
<meta property="og:type" content="article">
<meta property="article:published_time" content="2014-11-18T00:00:00-02:00">
<script type="text/javascript" async="" src="./JUnit_Rules_files/ga.js"></script><script type="application/ld+json">
{"name":null,"description":"Have you ever wrote JUnit tests extending a class that does some before and after work, so you didn’t have to repeat that code in various test classes? Well, I will not say that you have been doing it wrong, but, sure enough, you could do it better. How? Using JUnit Rules!","author":{"@type":"Person","name":"Carlos Alexandro Becker"},"@type":"BlogPosting","url":"http://carlosbecker.com/posts/junit-rules/","image":null,"publisher":null,"headline":"Using JUnit Rules to simplify your tests","dateModified":"2014-11-18T00:00:00-02:00","datePublished":"2014-11-18T00:00:00-02:00","sameAs":null,"mainEntityOfPage":{"@type":"WebPage","@id":"http://carlosbecker.com/posts/junit-rules/"},"@context":"http://schema.org"}</script>

<script src="./JUnit_Rules_files/embed.js" data-timestamp="1506148923215"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.24f72d376eb2ca218aef7ded079574a2.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.5c2c79222b3102b8568ff61fb846a843.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.85f5bbef17ae1502e3c8cf6c43ea50af.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"></head>
<body class="animated fade-in-down vsc-initialized" data-gr-c-s-loaded="true">
<div class="site-wrap">
<header class="site-header px2 px-responsive">
<div class="mt2 wrap">
<div class="measure">
<a href="https://carlosbecker.com/" class="site-title">Carlos Alexandro Becker</a>
<nav class="site-nav right">
<a href="https://status.carlosbecker.com/">Status</a>
<a href="https://carlosbecker.com/stats">Stats</a>
<a href="https://carlosbecker.com/talks">Talks</a>
<a href="https://carlosbecker.com/archive">Archive</a>
<a href="https://carlosbecker.com/feed.xml">RSS</a>
<a href="https://carlosbecker.com/contact">Contact</a>
<a href="https://carlosbecker.com/about">About</a>
</nav>
</div>
</div>
</header>
<div class="post p2 p-responsive wrap" role="main">
<div class="measure">
<div class="post-header mb2">
<h1>Using JUnit Rules to simplify your tests</h1>
<span class="post-meta">Nov 18, 2014</span><br>
<span class="post-meta small">
5 minutes
read
</span>
</div>
<article class="post-content">
<p>Have you ever wrote JUnit tests extending a class that does some before and
after work, so you didn’t have to repeat that code in various test classes?
Well, I will not say that you have been doing it wrong, but, sure enough, you
could do it better. How? Using JUnit Rules!</p>
<h2 id="the-basics">The Basics</h2>
<p>Well, before we learn all that, let’s start with the basics, shall we?</p>
<h3 id="timeouts">Timeouts</h3>
<p>Let’s take a simple example: Suppose that you want to set a timeout for all
test methods in a given class, an easy way to do that is like this:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahTest</span> </span>{
	<span class="hljs-meta">@Test</span>(timeout = <span class="hljs-number">1000</span>)
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testA</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>(timeout = <span class="hljs-number">1000</span>)
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testB</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>(timeout = <span class="hljs-number">1000</span>)
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testC</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>(timeout = <span class="hljs-number">1000</span>)
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testD</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>(timeout = <span class="hljs-number">1000</span>)
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testE</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-comment">// ...</span>
}
</code></pre>
<p>Besides that you repeated yourself tons of times, if you want to change
this timeout, you will have to change it in all methods. There is no need to
do that. Just use the <code>Timeout</code> Rule:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahTest</span> </span>{
	<span class="hljs-meta">@Rule</span>
	<span class="hljs-keyword">public</span> Timeout timeout = <span class="hljs-keyword">new</span> Timeout(<span class="hljs-number">2000</span>);

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testA</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testB</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testC</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testD</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testE</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// ...</span>
	}

	<span class="hljs-comment">// ...</span>
}
</code></pre>
<h3 id="temporary-folder">Temporary Folder</h3>
<p>Have you ever needed to do some test that uses <code>File</code> and/or needed a temporary
file/folder? <code>TemporaryFolder</code> to the rescue:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahTest</span> </span>{
	<span class="hljs-meta">@Rule</span>
	<span class="hljs-keyword">public</span> TemporaryFolder tempFolder = <span class="hljs-keyword">new</span> TemporaryFolder();

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIcon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		File icon = tempFolder.newFile(<span class="hljs-string">"icon.png"</span>);
		<span class="hljs-comment">// do something else...</span>
	}
}
</code></pre>
<h3 id="expected-exceptions">Expected Exceptions</h3>
<p>Ever needed more control on exceptions? Try the <code>ExpectedException</code> rule:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahTest</span> </span>{
	<span class="hljs-meta">@Rule</span>
	<span class="hljs-keyword">public</span> ExpectedException exception = ExpectedException.none();

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIcon</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		exception.expect(IllegalArgumentException.class);
		exception.expectMessage(<span class="hljs-string">"Dude, this is invalid!"</span>);
		<span class="hljs-comment">// do something that you expect to throw an exception...</span>
	}
}
</code></pre>
<h2 id="custom-rules">Custom Rules</h2>
<p>That’s neat, but… what if you need something else… something more “custom”?
Well, you can implement your own rules by implementing the <code>TestRule</code>
<code>interface</code>, for example, a Rule that init Mockito mocks (not very useful):</p>
<pre><code class="language-java hljs"><span class="hljs-meta">@RequiredArgsConstructor</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MockRule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TestRule</span> </span>{
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object target;

  <span class="hljs-function"><span class="hljs-keyword">public</span> Statement <span class="hljs-title">apply</span><span class="hljs-params">(Statement base, Description description)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Statement() {
      <span class="hljs-meta">@Override</span>
      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">evaluate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>{
        MockitoAnnotations.initMocks(target);
        base.evaluate();
      }
    };
  }
}
</code></pre>
<p>To use it, you just need to declare that rule in your test class:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahTest</span> </span>{
	<span class="hljs-meta">@Rule</span>
	<span class="hljs-keyword">public</span> MockRule mock = <span class="hljs-keyword">new</span> MockRule(<span class="hljs-keyword">this</span>);

	<span class="hljs-meta">@Mock</span>
	<span class="hljs-keyword">private</span> BlahService service;

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBlah</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		Assert.assertThat(
			service.blah(),
			CoreMatchers.notNullValue()
		);
	}
}
</code></pre>
<h3 id="external-resources">External Resources</h3>
<p>Returning to the example of this post’s first paragraph, you can also have
custom external resources rules by extending the <code>ExternalResource</code> class:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ExternalResource</span> </span>{
  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>{
    <span class="hljs-comment">// start the server</span>
  }

  <span class="hljs-meta">@Override</span>
  <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-comment">// stop the server</span>
	}
}
</code></pre>
<p>I believe that this makes more sense with Integration Tests, though. Also, in
this case, you probably would not want/need to start and stop the server
before and after each test method, right? So, you can use the <code>@ClassRule</code>
annotation:</p>
<pre><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlahServerTest</span> </span>{
	<span class="hljs-meta">@ClassRule</span>
	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MyServer server = <span class="hljs-keyword">new</span> MyServer();

	<span class="hljs-meta">@Test</span>
	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBlah</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>{
		<span class="hljs-comment">// test something that depends on the server.</span>
	}
}
</code></pre>
<p><strong>Attention</strong>: Note that when you use <code>@ClassRule</code>, your rule instance should
be <code>static</code>, just like <code>@BeforeClass</code> and <code>@AfterClass</code> methods.</p>
<h2 id="going-further">Going Further</h2>
<p>That’s the basics that will save you tons of abstract classes and ugly code. I
would also recommend you to take a good read at the <a href="https://github.com/junit-team/junit/wiki/Rules">junit wiki</a>. If
you have any question, don’t exitate to comment bellow, I will surely try to
answer them. <img class="emoji" title=":beer:" alt=":beer:" src="./JUnit_Rules_files/1f37a.png" height="20" width="20" align="absmiddle"></p>
<hr>
<p>
<a href="https://carlosbecker.com/contact">Your ad here.</a>
</p>
</article>
<div id="disqus_thread"><iframe id="dsq-app6289" name="dsq-app6289" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./JUnit_Rules_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 323px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<script>
  (function() {
      var d = document, s = d.createElement('script');
      s.src = '//caarlos0blog.disqus.com/embed.js';
      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
  })();
</script>
<noscript>Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;
</noscript>
<h4 class="related-post-title">Related Posts
<div class="post ml2">
<a href="https://carlosbecker.com/posts/repositories-graveyard/" class="post-link">
<h5 class="post-title">A Repository Graveyard
</h5>
<p class="post-summary"></p>
</a>
</div>
<div class="post ml2">
<a href="https://carlosbecker.com/posts/chart-repo-stars/" class="post-link">
<h5 class="post-title">Charting Repository Stars
</h5>
<p class="post-summary"></p>
</a>
</div>
<div class="post ml2">
<a href="https://carlosbecker.com/posts/gke/" class="post-link">
<h5 class="post-title">GKE in production
</h5>
<p class="post-summary"></p>
</a>
</div>
<link rel="stylesheet" href="./JUnit_Rules_files/ocean.min.css">
<script src="./JUnit_Rules_files/highlight.min.js"></script>
<script src="./JUnit_Rules_files/go.min.js"></script>
<script src="./JUnit_Rules_files/erb.min.js"></script>
<script src="./JUnit_Rules_files/yaml.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
</h4>
</div>
</div>
</div>
<footer class="footer">
<div class="p2 wrap">
<div class="measure mt1 center">
<small>
Stuff written by <a href="https://carlosbecker.com/about">Carlos Alexandro Becker</a>.<br>
&lt;/&gt; available on <a href="https://github.com/caarlos0/caarlos0.github.com">Github</a>.
</small>
</div>
</div>
</footer>
<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-50435491-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>


<iframe style="display: none;" src="./JUnit_Rules_files/saved_resource(1).html"></iframe><iframe id="dsq-app6292" name="dsq-app6292" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./JUnit_Rules_files/saved_resource(2).html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 100% !important; position: fixed !important; top: 0px !important; right: 0px !important; left: auto !important; bottom: auto !important; z-index: 2147483647 !important; display: none !important;"></iframe></body></html>