<!DOCTYPE html>
<!-- saved from url=(0081)https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html -->
<html lang="en-US" prefix="og: http://ogp.me/ns#"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/3f1ae.default.include.822e59.css" media="all"><link rel="profile" href="https://gmpg.org/xfn/11"><link rel="pingback" href="https://www.javacodegeeks.com/xmlrpc.php">  <script async="" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/analytics.js"></script><script src="https://securepubads.g.doubleclick.net/gampad/ads?gdfp_req=1&amp;correlator=3458696477706745&amp;output=json_html&amp;callback=googletag.impl.pubads.callbackProxy1&amp;impl=fifs&amp;json_a=1&amp;eid=108809080%2C108809103&amp;sc=1&amp;sfv=1-0-8&amp;iu_parts=70432299%2CJCG_Header%2CJCG_In-post%2CJCG_Side%2CJCG_Side_1%2CJCG_Under-post%2CJCG_Side_2%2CJCG_NotifBar&amp;enc_prev_ius=%2F0%2F1%2C%2F0%2F2%2C%2F0%2F3%2C%2F0%2F4%2C%2F0%2F5%2C%2F0%2F6%2C%2F0%2F7&amp;prev_iu_szs=728x90%2C300x250%2C300x250%2C300x250%2C300x250%2C300x600%2C1220x50&amp;cust_params=PostID%3D44888%26PostCAT%3D7&amp;cookie_enabled=1&amp;abxe=1&amp;lmt=0&amp;dt=1496628654210&amp;frm=20&amp;biw=1432&amp;bih=723&amp;oid=3&amp;adxs=0%2C0%2C0%2C0%2C0%2C0%2C-9&amp;adys=0%2C0%2C0%2C0%2C0%2C0%2C-9&amp;adks=3917931340%2C2292939308%2C1430340824%2C2006874815%2C2131506249%2C778024483%2C3359392277&amp;gut=v2&amp;ifi=1&amp;u_tz=360&amp;u_his=1&amp;u_h=900&amp;u_w=1440&amp;u_ah=797&amp;u_aw=1440&amp;u_cd=24&amp;u_nplug=5&amp;u_nmime=7&amp;u_sd=1&amp;flash=25.0.0&amp;url=https%3A%2F%2Fwww.javacodegeeks.com%2F2015%2F11%2Fmocks-spies-partial-mocks-and-stubbing.html&amp;dssz=18&amp;icsg=736&amp;std=0&amp;vrg=120&amp;vrp=120&amp;ga_vid=1999712305.1490359553&amp;ga_sid=1496628654&amp;ga_hid=1849600612"></script><script type="text/javascript" async="" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/recaptcha__en.js"></script><script async="" type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/gpt.js"></script><script type="text/javascript">var googletag=googletag||{};googletag.cmd=googletag.cmd||[];(function(){var gads=document.createElement('script');gads.async=true;gads.type='text/javascript';var useSSL='https:'==document.location.protocol;gads.src=(useSSL?'https:':'http:')+'//www.googletagservices.com/tag/js/gpt.js';var node=document.getElementsByTagName('script')[0];node.parentNode.insertBefore(gads,node);})();</script> <script type="text/javascript">googletag.cmd.push(function(){googletag.defineSlot('/70432299/JCG_Header',[728,90],'div-gpt-ad-1415445260332-0').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_In-post',[300,250],'div-gpt-ad-1415445260332-2').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_Side',[300,250],'div-gpt-ad-1415445260332-3').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_Side_1',[300,250],'div-gpt-ad-1415445260332-4').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_Under-post',[300,250],'div-gpt-ad-1415445260332-5').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_Side_2',[300,600],'div-gpt-ad-1415445260332-6').addService(googletag.pubads());googletag.defineSlot('/70432299/JCG_NotifBar',[1220,50],'div-gpt-ad-1431445244472-0').addService(googletag.pubads());googletag.pubads().setTargeting("PostID","44888");googletag.pubads().setTargeting("PostCAT","7");googletag.pubads().enableSingleRequest();googletag.enableServices();});</script> <title>Mocks, Spies, Partial Mocks and Stubbing | Java Code Geeks - 2017</title><link rel="canonical" href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html"><link rel="publisher" href="https://plus.google.com/+JavaCodeGeeks/"><meta name="twitter:card" content="summary"><meta name="twitter:description" content="This article is part of our Academy Course titled Testing with Mockito. In this course, you will dive into the magic of Mockito. You will learn about Mocks, Spies and Partial Mocks, and their corresponding Stubbing behaviour. You will also see the process of Verification with Test Doubles and Object Matchers. Finally, Test Driven Development ..."><meta name="twitter:title" content="Mocks, Spies, Partial Mocks and Stubbing | Java Code Geeks - 2017"><meta name="twitter:site" content="@javacodegeeks"><meta name="twitter:image" content="https://www.javacodegeeks.com/wp-content/uploads/2012/10/mockito-logo.jpg"><meta name="twitter:creator" content="@javacodegeeks"><link rel="dns-prefetch" href="https://www.google.com/"><link rel="dns-prefetch" href="https://gdc.indeed.com/"><link rel="dns-prefetch" href="https://fonts.googleapis.com/"><link rel="dns-prefetch" href="https://s.w.org/"><link rel="alternate" type="application/rss+xml" title="Java Code Geeks » Feed" href="https://www.javacodegeeks.com/feed/"><link rel="alternate" type="application/rss+xml" title="Java Code Geeks » Comments Feed" href="https://www.javacodegeeks.com/comments/feed/"><link rel="alternate" type="application/rss+xml" title="Java Code Geeks » Mocks, Spies, Partial Mocks and Stubbing Comments Feed" href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html/feed/"><link rel="stylesheet" id="um_recaptcha-css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/um-recaptcha.css" type="text/css" media="all"><link rel="stylesheet" id="dlm-frontend-css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/frontend.css" type="text/css" media="all"><link rel="stylesheet" id="Oswald-css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/css" type="text/css" media="all"><link rel="stylesheet" id="um_minified-css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/um.min.css" type="text/css" media="all"> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/jquery.js"></script><script src="https://securepubads.g.doubleclick.net/gpt/pubads_impl_120.js" async=""></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/api.js"></script> <script type="text/javascript" src="https://gdc.indeed.com/ads/apiresults.js"></script> <link rel="https://api.w.org/" href="https://www.javacodegeeks.com/wp-json/"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.javacodegeeks.com/xmlrpc.php?rsd"><link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.javacodegeeks.com/wp-includes/wlwmanifest.xml"><meta name="generator" content="WordPress 4.7.5"><link rel="shortlink" href="https://www.javacodegeeks.com/?p=44888"><link rel="alternate" type="application/json+oembed" href="https://www.javacodegeeks.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.javacodegeeks.com%2F2015%2F11%2Fmocks-spies-partial-mocks-and-stubbing.html"><link rel="alternate" type="text/xml+oembed" href="https://www.javacodegeeks.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.javacodegeeks.com%2F2015%2F11%2Fmocks-spies-partial-mocks-and-stubbing.html&amp;format=xml"><link rel="shortcut icon" href="https://www.javacodegeeks.com/wp-content/uploads/2012/12/JavaCodeGeeks-favIcon.png" title="Favicon"><meta property="og:title" content="Mocks, Spies, Partial Mocks and Stubbing"><meta property="og:type" content="article"><meta property="og:description" content="This article is part of our Academy Course titled Testing with Mockito.In this course, you will ..."><meta property="og:url" content="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html"><meta property="og:site_name" content="Java Code Geeks"><meta property="og:image" content="https://www.javacodegeeks.com/wp-content/uploads/2012/10/mockito-logo.jpg"> <!--[if IE]> <script type="text/javascript">jQuery(document).ready(function(){jQuery(".menu-item").has("ul").children("a").attr("aria-haspopup","true");});</script> <![endif]--> <!--[if lt IE 9]> <script src="//www.javacodegeeks.com/wp-content/themes/jarida/js/html5.js"></script> <script src="//www.javacodegeeks.com/wp-content/themes/jarida/js/selectivizr-min.js"></script> <![endif]--> <!--[if IE 8]><link rel="stylesheet" type="text/css" media="all" href="//www.javacodegeeks.com/wp-content/themes/jarida/css/ie8.css" /> <![endif]--><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"><style type="text/css" media="screen">body{background-image:url(https://www.javacodegeeks.com/wp-content/themes/jarida/images/patterns/body-bg1.png);background-position:top center}body.single .entry, body.page
.entry{font-size:15px !important}#main-nav ul li.current-menu-item a,
#main-nav ul li.current-menu-item a:hover,
#main-nav ul li.current-menu-parent a,
#main-nav ul li.current-menu-parent a:hover,
#main-nav ul li.current-page-ancestor a,
#main-nav ul li.current-page-ancestor a:hover,
.pagination span.current,
.ei-slider-thumbs li.ei-slider-element,
.breaking-news span,
.ei-title h2,h2.cat-box-title,
a.more-link,.scroll-nav a,
.flex-direction-nav a,
.tagcloud a:hover,
#tabbed-widget ul.tabs li.active a,
.slider-caption h2, .full-width .content .slider-caption h2,
.review-percentage .review-item span span,.review-final-score,
.woocommerce span.onsale, .woocommerce-page span.onsale ,
.woocommerce .widget_price_filter .ui-slider .ui-slider-handle, .woocommerce-page .widget_price_filter .ui-slider .ui-slider-handle,
.button,a.button,#main-content input[type="submit"],#main-content input[type="submit"]:focus, span.onsale,
.mejs-container .mejs-controls .mejs-time-rail .mejs-time-current,#reading-position-indicator{background-color:#326693 !important}::-webkit-scrollbar-thumb{background-color:#326693 !important}#main-nav,.top-nav{border-bottom-color:#326693}.cat-box , .footer-bottom
.container{border-top-color:#326693}body.single .post .entry a, body.page .post .entry
a{color:#326693}body.single .post .entry a:hover, body.page .post .entry a:hover{color:#478cc4;text-decoration:underline}#main-nav ul
li{text-transform:none}.toc
dl{display:block}.toc
dt{display:block}.toc
dd{display:block;-webkit-margin-start:20px;-moz-margin-start:20px}.toc{line-height:1.4;font-size:90%;border-bottom:1px solid #eee;padding:20px;border:1px
solid #e1e1e1;background:#f1f1f1;border-radius:9px;-moz-border-radius:9px;-webkit-border-radius:9px;width:80%;display:inline-block;margin:20px
0}code{display:inline}.tip{background:url(/wp-content/uploads/sprites.png) -201px -72px no-repeat;padding:10px
20px 25px 80px;margin:2.5em 1em;border-color:#dedede #d8d8d8 #d3d3d3;text-shadow:0 1px 0 #fff;-webkit-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;-moz-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;background-color:#FAFAFA;color:#555;border:1px
solid #DEDEDE;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.download{background:url(/wp-content/uploads/sprites.png) -266px 0px no-repeat;padding:10px
20px 25px 80px;margin:2.5em 1em;border-color:#dedede #d8d8d8 #d3d3d3;text-shadow:0 1px 0 #fff;-webkit-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;-moz-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;background-color:#FAFAFA;color:#555;border:1px
solid #DEDEDE;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.nlbox{background:#E2ECFA;margin:15px
0px 15px;padding:10px;-webkit-border-radius:3px;-mozilla-border-radius:3px;-o-border-radius:3px;border-radius:3px;-moz-box-shadow:0px 2px 2px 1px #d7e1eb;-webkit-box-shadow:0px 2px 2px 1px #d7e1eb;box-shadow:0px 2px 2px 1px #d7e1eb;border:solid 1px #D8D8D8;display:inline-block}.nlbox1{background:#E2ECFA;margin:-10px 0 25px;width:auto;max-width:798px;padding:10px;-webkit-border-radius:3px;-mozilla-border-radius:3px;-o-border-radius:3px;border-radius:3px;-moz-box-shadow:0px 2px 2px 1px #d7e1eb;-webkit-box-shadow:0px 2px 2px 1px #d7e1eb;box-shadow:0px 2px 2px 1px #d7e1eb;border:solid 1px #D8D8D8}.button-gw{border-top:1px solid #96d1f8;background:#65a9d7;background:-webkit-gradient(linear, left top, left bottom, from(#3e779d), to(#65a9d7));background:-webkit-linear-gradient(top, #3e779d, #65a9d7);background:-moz-linear-gradient(top, #3e779d, #65a9d7);background:-ms-linear-gradient(top, #3e779d, #65a9d7);background:-o-linear-gradient(top, #3e779d, #65a9d7);padding:20px
40px;-webkit-border-radius:8px;-moz-border-radius:8px;border-radius:8px;-webkit-box-shadow:rgba(0,0,0,1) 0 1px 0;-moz-box-shadow:rgba(0,0,0,1) 0 1px 0;box-shadow:rgba(0,0,0,1) 0 1px 0;text-shadow:rgba(0,0,0,.4) 0 1px 0;color:white;font-size:25px;font-family:Georgia,Serif;text-decoration:none !important;vertical-align:middle}.button-gw:hover{border-top-color:#28597a;background:#28597a;color:#ccc}.button-gw:active{border-top-color:#1b435e;background:#1b435e}.widget_wpjb-recent-jobs .wpjb-grid-compact{margin-left:5%;margin-right:5%}.attribution{border-color:#dedede #d8d8d8 #d3d3d3;text-shadow:0 1px 0 #fff;-webkit-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;-moz-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;background:#fff;background:-moz-linear-gradient(top, #fff 0%, #f6f6f6 47%, #ededed 100%);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(47%,#f6f6f6), color-stop(100%,#ededed));background:-webkit-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:-o-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:-ms-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);padding:3px
8px;line-height:20px;color:#555;border:1px
solid #DEDEDE;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;margin-top:20px;display:inline-block}.attribution
.reference{font-weight:bold}.attribution
table{border:none;background-color:inherit}.attribution table
td{vertical-align:top;padding:0px
5px;border-bottom:none;font-size:inherit}a.TPbutton_w_cnd01lb:hover{background-color:#fc0;background:url(/wp-content/uploads/sprites.png) 0 -102px;color:#fff;text-decoration:none;transition:none}a.TPbutton_w_cnd01lb{-webkit-border-radius:7px;-mozilla-border-radius:7px;-o-border-radius:7px;border-radius:7px;text-decoration:none;color:#fff;font-family:'lucida sans','lucida grande',arial,helvetica,sans-serif;letter-spacing:-1px;font-weight:bold;background-color:#f90;background:url(/wp-content/uploads/sprites.png) 0 -73px;padding:4px
10px 4px 10px;font-size:16px;-moz-box-shadow:0px 3px 3px 2px #d7e1eb;-webkit-box-shadow:0px 3px 3px 2px #d7e1eb;box-shadow:0px 3px 3px 2px #d7e1eb;border:solid 2px #fff;width:200px;height:56px;transition:none}.TPbutton_w_cnd01lb_arrow{position:relative;display:inline-block;overflow:hidden;vertical-align:bottom;width:30px;height:20px;background:url(/wp-content/uploads/sprites.png) -146px 0px}#commentform
input{width:inherit}#author-box .post-listing{margin-bottom:0px}#author-box .block-head
h3{text-transform:none}header#theme-header{margin:0
0 0}blockquote{display:inline-block;margin:20px
0 10px 40px;font-size:14px}blockquote:before{font-size:25px;line-height:inherit}.syntaxhighlighter{display:inline-block}@media (max-width: 767px){#div-gpt-ad-1415445260332-0{display:none}}@media (max-width: 479px){#div-gpt-ad-1415445260332-3{margin-left:-10px}#div-gpt-ad-1415445260332-4{margin-left:-10px}#div-gpt-ad-1415445260332-6{margin-left:-10px}}.sidebar{position:relative}@media screen and (min-width: 500px){.cc_container{left:15px !important}}.cc_container{-webkit-animation-name:fadeInLeft !important;animation-name:fadeInLeft !important}div.datepicker{z-index:1000}.wp-listing{width:33%;padding-bottom:50px;float:left;line-height:20px;display:table}.wp-listing
table{padding:11px;text-align:center;border:1px
solid #FFF}.wp-listing table:hover{border-color:#dedede #d8d8d8 #d3d3d3;text-shadow:0 1px 0 #fff;-webkit-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;-moz-box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;box-shadow:0 1px 1px #eaeaea, inset 0 1px 0 #fbfbfb;background:#fff;background:-moz-linear-gradient(top, #fff 0%, #f6f6f6 47%, #ededed 100%);background:-webkit-gradient(linear, left top, left bottom, color-stop(0%,#ffffff), color-stop(47%,#f6f6f6), color-stop(100%,#ededed));background:-webkit-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:-o-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:-ms-linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);background:linear-gradient(top, #fff 0%,#f6f6f6 47%,#ededed 100%);color:#555;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.download-button{width:80%}.minibook
img{border:none}.minibook
table{border:none;background:none}.minibook table
td{border:none;font-size:14px;color:inherit}.minibook .e3lan-post{display:none}div.um-register .um-form::after{content:"* By registering you agree to receive email notifications about our products/services. You can unsubscribe anytime from your account page.";font-size:12px;font-style:italic;display:block;margin-top:30px}</style> <script type="text/javascript">var ultimatemember_image_upload_url='https://www.javacodegeeks.com/wp-content/plugins/ultimate-member/core/lib/upload/um-image-upload.php';var ultimatemember_file_upload_url='https://www.javacodegeeks.com/wp-content/plugins/ultimate-member/core/lib/upload/um-file-upload.php';var ultimatemember_ajax_url='https://www.javacodegeeks.com/wp-admin/admin-ajax.php';</script> <style type="text/css">.request_name{display:none !important}</style><link rel="prefetch" href="https://tpc.googlesyndication.com/safeframe/1-0-8/html/container.html"></head><body id="top" class="post-template-default single single-post postid-44888 single-format-standard"><div class="background-cover"></div><div class="wrapper"><div class="top-nav fade-in animated1 head_menu"><div class="container"><div class="search-block"><form method="get" id="searchform" action="https://www.javacodegeeks.com/"> <button class="search-button" type="submit" value="Search"></button> <input type="text" id="s" name="s" value="Search..." onfocus="if (this.value == &#39;Search...&#39;) {this.value = &#39;&#39;;}" onblur="if (this.value == &#39;&#39;) {this.value = &#39;Search...&#39;;}"></form></div><div class="social-icons icon_flat"> <a class="tooldown" title="Rss" href="http://feeds.feedburner.com/JavaCodeGeeks" target="_blank"><i class="tieicon-rss"></i></a><a class="tooldown" title="Google+" href="https://plus.google.com/+JavaCodeGeeks/" target="_blank"><i class="tieicon-gplus"></i></a><a class="tooldown" title="Facebook" href="https://www.facebook.com/javacodegeeks" target="_blank"><i class="tieicon-facebook"></i></a><a class="tooldown" title="Twitter" href="https://twitter.com/javacodegeeks" target="_blank"><i class="tieicon-twitter"></i></a><a class="tooldown" title="LinkedIn" href="https://www.linkedin.com/groups/Java-Code-Geeks-3810709" target="_blank"><i class="tieicon-linkedin"></i></a><a class="tooldown" title="Github" href="https://github.com/javacodegeeks/" target="_blank"><i class="tieicon-github"></i></a></div><div class="top-menu"><ul id="menu-pages" class="menu"><li id="menu-item-38541" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-has-children menu-item-38541"><a href="http://www.javacodegeeks.com/#">Knowledge Base</a><ul class="sub-menu"><li id="menu-item-38217" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38217"><a href="https://www.javacodegeeks.com/tutorials/">Tutorials</a><ul class="sub-menu"><li id="menu-item-38218" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38218"><a href="https://www.javacodegeeks.com/tutorials/java-tutorials/">Java Tutorials</a><ul class="sub-menu"><li id="menu-item-38219" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38219"><a href="https://www.javacodegeeks.com/tutorials/java-tutorials/core-java-tutorials/">Core Java Tutorials</a></li><li id="menu-item-38220" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38220"><a href="https://www.javacodegeeks.com/tutorials/java-tutorials/enterprise-java-tutorials/">Enterprise Java Tutorials</a><ul class="sub-menu"><li id="menu-item-38221" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38221"><a href="https://www.javacodegeeks.com/tutorials/java-tutorials/enterprise-java-tutorials/spring-tutorials/">Spring Tutorials</a></li></ul></li><li id="menu-item-38222" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38222"><a href="https://www.javacodegeeks.com/tutorials/java-tutorials/desktop-java-tutorials/">Desktop Java Tutorials</a></li></ul></li><li id="menu-item-38223" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38223"><a href="https://www.javacodegeeks.com/tutorials/android-tutorials/">Android Tutorials</a><ul class="sub-menu"><li id="menu-item-38224" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38224"><a href="https://www.javacodegeeks.com/tutorials/android-tutorials/android-core-tutorials/">Android Core Tutorials</a></li><li id="menu-item-38225" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38225"><a href="https://www.javacodegeeks.com/tutorials/android-tutorials/android-game-tutorials/">Android Game Tutorials</a></li></ul></li><li id="menu-item-38226" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38226"><a href="https://www.javacodegeeks.com/tutorials/scala-tutorials/">Scala Tutorials</a></li><li id="menu-item-38227" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38227"><a href="https://www.javacodegeeks.com/tutorials/devops-tutorials/">DevOps Tutorials</a></li><li id="menu-item-38228" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38228"><a href="https://www.javacodegeeks.com/tutorials/nosql-tutorials/">NoSQL Tutorials</a></li><li id="menu-item-38229" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38229"><a href="https://www.javacodegeeks.com/tutorials/groovy-grails-tutorials/">Groovy/Grails Tutorials</a></li></ul></li><li id="menu-item-38273" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-38273"><a href="http://examples.javacodegeeks.com/">Examples</a></li><li id="menu-item-45446" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-45446"><a href="https://www.javacodegeeks.com/courses/">Courses</a></li><li id="menu-item-65167" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-65167"><a href="http://www.javacodegeeks.com/minibook/">Minibooks</a></li></ul></li><li id="menu-item-38243" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38243"><a href="https://www.javacodegeeks.com/resources/">Resources</a><ul class="sub-menu"><li id="menu-item-38244" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38244"><a href="https://www.javacodegeeks.com/resources/software/">Software</a></li><li id="menu-item-38245" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38245"><a href="https://www.javacodegeeks.com/resources/our-projects/">Our Projects</a></li></ul></li><li id="menu-item-54369" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-54369"><a href="https://deals.javacodegeeks.com/">Deals</a></li><li id="menu-item-38240" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38240"><a href="https://www.javacodegeeks.com/job-board/">Job Board</a><ul class="sub-menu"><li id="menu-item-61394" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-61394"><a href="https://www.javacodegeeks.com/jobs/">Jobs</a><ul class="sub-menu"><li id="menu-item-61395" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-61395"><a href="https://www.javacodegeeks.com/jobs/advanced-search/">Advanced Search</a></li><li id="menu-item-61396" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-61396"><a href="https://www.javacodegeeks.com/jobs/post-a-job/">Post a Job</a></li></ul></li><li id="menu-item-61392" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-61392"><a href="https://www.javacodegeeks.com/resumes/">Resumes</a><ul class="sub-menu"><li id="menu-item-61393" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-61393"><a href="https://www.javacodegeeks.com/resumes/advanced-search/">Advanced Search</a></li></ul></li><li id="menu-item-61390" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-61390"><a href="https://www.javacodegeeks.com/employer-panel/">Employer Panel</a><ul class="sub-menu"><li id="menu-item-61391" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-61391"><a href="https://www.javacodegeeks.com/employer-panel/employer-registration/">Employer Registration</a></li></ul></li><li id="menu-item-61388" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-61388"><a href="https://www.javacodegeeks.com/candidate-panel/">Candidate Panel</a><ul class="sub-menu"><li id="menu-item-61389" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-61389"><a href="https://www.javacodegeeks.com/candidate-panel/candidate-registration/">Candidate Registration</a></li></ul></li></ul></li><li id="menu-item-38230" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38230"><a href="https://www.javacodegeeks.com/join-us/">Join Us</a><ul class="sub-menu"><li id="menu-item-38231" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38231"><a href="https://www.javacodegeeks.com/join-us/jcg/">JCG</a></li><li id="menu-item-38232" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38232"><a href="https://www.javacodegeeks.com/join-us/w4g/">W4G</a><ul class="sub-menu"><li id="menu-item-38233" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38233"><a href="https://www.javacodegeeks.com/join-us/w4g/submission-guidelines/">Submission Guidelines</a></li><li id="menu-item-38234" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38234"><a href="https://www.javacodegeeks.com/join-us/w4g/terms-conditions/">Terms &amp; Conditions</a></li></ul></li></ul></li><li id="menu-item-38235" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-has-children menu-item-38235"><a href="https://www.javacodegeeks.com/about/">About</a><ul class="sub-menu"><li id="menu-item-38236" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38236"><a href="https://www.javacodegeeks.com/about/about-jcgs/">About JCGs</a></li><li id="menu-item-38237" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38237"><a href="https://www.javacodegeeks.com/about/advertising/">Advertising</a></li><li id="menu-item-38238" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38238"><a href="https://www.javacodegeeks.com/about/terms-of-use/">Terms of Use</a></li><li id="menu-item-38239" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-38239"><a href="https://www.javacodegeeks.com/about/privacy-policy/">Privacy Policy</a></li></ul></li><li id="menu-item-65125" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-65125"><a href="https://www.javacodegeeks.com/login/">Login</a></li><li id="menu-item-65124" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-65124"><a href="https://www.javacodegeeks.com/register/">Register</a></li></ul></div></div></div><div class="container"> <header id="theme-header"><div class="header-content fade-in animated1"><div class="logo"><h2>								<a title="Java Code Geeks" href="https://www.javacodegeeks.com/"> <img src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/JavaCodeGeeks-logo.png" alt="Java Code Geeks"><strong>Java Code Geeks Java Developers Resource Center</strong> </a></h2></div><div class="e3lan-top"><div id="div-gpt-ad-1415445260332-0" style="width:728px;height:90px;float:right;margin-top:8px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-0');});</script> <div id="google_ads_iframe_/70432299/JCG_Header_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_Header_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_Header_0" width="728" height="90" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource.html"></iframe></div></div></div><div class="clear"></div></div> <nav id="main-nav" class="fade-in animated2"><div class="container"><div class="main-menu"><ul id="menu-categories" class="menu"><li id="menu-item-38251" class="menu-item  menu-item-type-taxonomy  menu-item-object-category  menu-item-has-children"><a href="https://www.javacodegeeks.com/category/android/">Android</a><ul class="sub-menu"><li id="menu-item-38252" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/android/android-core/">Android Core</a></li><li id="menu-item-38253" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/android/android-games/">Android Games</a></li></ul></li><li id="menu-item-38257" class="menu-item  menu-item-type-taxonomy  menu-item-object-category  current-post-ancestor  menu-item-has-children"><a href="https://www.javacodegeeks.com/category/java/">Java</a><ul class="sub-menu"><li id="menu-item-38258" class="menu-item  menu-item-type-taxonomy  menu-item-object-category  current-post-ancestor  current-menu-parent  current-post-parent"><a href="https://www.javacodegeeks.com/category/java/core-java/">Core Java</a></li><li id="menu-item-38259" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/java/desktop-java/">Desktop Java</a></li><li id="menu-item-38260" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/java/enterprise-java/">Enterprise Java</a></li></ul></li><li id="menu-item-38261" class="menu-item  menu-item-type-taxonomy  menu-item-object-category  menu-item-has-children"><a href="https://www.javacodegeeks.com/category/jvm-languages/">JVM Languages</a><ul class="sub-menu"><li id="menu-item-38262" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/ceylon/">Ceylon</a></li><li id="menu-item-38263" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/clojure/">Clojure</a></li><li id="menu-item-38264" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/groovy/">Groovy</a></li><li id="menu-item-38265" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/jruby/">JRuby</a></li><li id="menu-item-38266" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/kotlin/">Kotlin</a></li><li id="menu-item-38267" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/jvm-languages/scala/">Scala</a></li></ul></li><li id="menu-item-38271" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/software-development/">Software Development</a></li><li id="menu-item-38250" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/agile/">Agile</a></li><li id="menu-item-38254" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/career/">Career</a></li><li id="menu-item-38255" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/communications/">Communications</a></li><li id="menu-item-38256" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/devops/">DevOps</a></li><li id="menu-item-38268" class="menu-item  menu-item-type-taxonomy  menu-item-object-category  menu-item-has-children"><a href="https://www.javacodegeeks.com/category/meta-jcg/">Meta JCG</a><ul class="sub-menu"><li id="menu-item-38269" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/meta-jcg/best-of-the-week/">Best Of The Week</a></li><li id="menu-item-38270" class="menu-item  menu-item-type-taxonomy  menu-item-object-category"><a href="https://www.javacodegeeks.com/category/misc/">Misc</a></li></ul></li></ul></div></div> </nav> </header><div id="main-content" class="container fade-in animated3 sidebar-narrow-left"><div class="content-wrap-wide"><div class="content"><div xmlns:v="http://rdf.data-vocabulary.org/#" id="crumbs"><span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" class="crumbs-home" href="https://www.javacodegeeks.com/"><i class="tieicon-home"></i>Home</a></span> » <span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://www.javacodegeeks.com/category/java/">Java</a></span> » <span typeof="v:Breadcrumb"><a rel="v:url" property="v:title" href="https://www.javacodegeeks.com/category/java/core-java/">Core Java</a></span> » <span class="current">Mocks, Spies, Partial Mocks and Stubbing</span></div> <section id="author-box"><div class="block-head"><h3>About Hugh Hamill</h3></div><div class="post-listing"><div class="author-avatar"> <img src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/profile_photo-80.jpg" class="func-um_user gravatar avatar avatar-60 um-avatar um-avatar-uploaded" width="60" height="60" alt="Hugh Hamill"></div><div class="author-description"> Hugh is a Senior Software Engineer and Certified Scrum Master based in Galway, Ireland. He achieved his B.Sc. in Applied Computing from Waterford Institute of Technology in 2002 and has been working in industry since then.  He has worked for a several large blue chip software companies listed on both the NASDAQ and NYSE.</div><div class="author-social"> <a class="ttip" href="http://www.doubleh.ie/" title="Hugh Hamill &#39;s site"><img src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/author_site.png" width="18" height="18" alt=""></a></div><div class="clear"></div></div> </section> <article id="the-post" class="post-listing post-44888 post type-post status-publish format-standard has-post-thumbnail hentry category-core-java tag-mockito tag-testing"><div class="post-inner"><h1 class="name post-title entry-title" itemprop="itemReviewed" itemscope="" itemtype="http://schema.org/Thing"><span itemprop="name">Mocks, Spies, Partial Mocks and Stubbing</span></h1><p class="post-meta"> <span class="post-meta-author">Posted by:  <a href="https://www.javacodegeeks.com/author/hugh-hamill/" title="">Hugh Hamill </a></span> <span class="post-cats">in  <a href="https://www.javacodegeeks.com/category/java/core-java/" rel="category tag">Core Java</a></span> <span class="tie-date">November 15th, 2015</span></p><div class="clear"></div><div class="entry"><div class="e3lan-post"><div id="div-gpt-ad-1415445260332-2" style="width:300px; height:250px;float:left; margin-right:20px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-2');});</script> <div id="google_ads_iframe_/70432299/JCG_In-post_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_In-post_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_In-post_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource(1).html"></iframe></div></div></div><p><em>This article is part of our Academy Course titled <a href="http://www.javacodegeeks.com/2015/09/testing-with-mockito/">Testing with Mockito</a>.</em></p><p><em>In this course, you will dive into the magic of Mockito. You will learn about Mocks, Spies and Partial Mocks, and their corresponding Stubbing behaviour. You will also see the process of Verification with Test Doubles and Object Matchers. Finally, Test Driven Development (TDD) with Mockito is discussed in order to see how this library fits in the concept of TDD. Check it out <a href="http://www.javacodegeeks.com/2015/09/testing-with-mockito/">here</a>!</em></p> <script type="text/javascript">(function(){if(!window.mc4wp){window.mc4wp={listeners:[],forms:{on:function(event,callback){window.mc4wp.listeners.push({event:event,callback:callback});}}}}})();</script><form id="mc4wp-form-1" class="mc4wp-form mc4wp-form-38947 mc4wp-form-theme mc4wp-form-theme-red mc4wp-ajax" method="post" data-id="38947" data-name="In Post"><div class="mc4wp-form-fields"><div class="nlbox" style="font-family: Tahoma,Arial,Verdana,sans-serif; font-size: 13px;"><h1 style="font-family: inherit; font-size: 2em; margin: 0;">Do you want to know how to develop your skillset to become a <span style="color: #CAB43D; text-shadow: 1px 1px #835D5D;">Java Rockstar?</span></h1><div style="background: url(&#39;/wp-content/uploads/2015/01/books_promo.png&#39;) no-repeat; float:left; padding: 75px 130px 310px 170px; margin-top: -10px; margin-left: -35px;"></div><table style="margin-top: 20px; border: none; background-color: inherit; width: inherit; font-family: inherit; padding-left: 20px;"><tbody><tr><td style="vertical-align:top; border: none; padding: 0; font-size: inherit;"><h2 style="font-family: inherit; font-size: 1.5em; margin: 0;">Subscribe to our newsletter to start Rocking <span style="text-decoration: underline;">right now!</span></h2><h5 style="font-family: inherit; font-size: 1.17em; margin-top: 3px;">To get you started we give you our best selling eBooks for <span style="color:#e01404; text-shadow: 1px 1px #C99924; font-size: 20px; line-height: 25px;">FREE!</span></h5><p></p><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>1.</strong> JPA Mini Book</h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>2.</strong> JVM Troubleshooting Guide</h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>3.</strong> JUnit Tutorial for Unit Testing</h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>4.</strong> Java Annotations Tutorial<!--3--></h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>5.</strong> Java Interview Questions</h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>6.</strong> Spring Interview Questions</h3><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;"><strong>7.</strong> Android UI Design</h3><p></p><h3 style="font-family: inherit; font-size: 1.17em; margin: 0;">and many more ....</h3><p>&nbsp;</p><p> <label for="mc4wp_email"><span style="font-weight: bold; font-size: 13pt;">Email address: </span></label> <input type="email" id="mc4wp_email" name="EMAIL" required="" placeholder="Your email address"></p> <input type="submit" value="Sign up"></td></tr></tbody></table></div><div style="display: none;"><input type="text" name="_mc4wp_honeypot" value="" tabindex="-1" autocomplete="off"></div><input type="hidden" name="_mc4wp_timestamp" value="1496622076"><input type="hidden" name="_mc4wp_form_id" value="38947"><input type="hidden" name="_mc4wp_form_element_id" value="mc4wp-form-1"></div><div class="mc4wp-response"></div></form><div class="toc"><h4>Table Of Contents</h4><dl><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#introduction">1. Introduction</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#name">2. Mock, Stub, Spy – What’s in a name?</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#void">3. Stubbing a void method</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#return">4. Stubbing return values</a></dt><dd><dl><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#answer">4.1. Using Answers</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#bdd">4.2. A note on Behaviour Driven Development test conventions</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#eclipse">4.3. A tip on using Mockito static method in Eclipse</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#multiple">4.4. Using multiple Mocks</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#test">4.5. Test Yourself! Test Update!</a></dt></dl></dd><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#matchers">5. Argument Matchers</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#partial">6. Spies and Partial Stubbing</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#conclusion">7. Conclusion</a></dt><dt><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#code">8. Download the Source Code</a></dt></dl></div><h2><a name="introduction"></a>1. Introduction</h2><p>In this tutorial we will take an in-depth look at stubbing classes and interfaces using Mockito.</p><h2><a name="name"></a>2. Mock, Stub, Spy – What’s in a name?</h2><p>A lot of terminology in mocking is used interchangeably and as both verbs and nouns. We will give a definition of these terms now to avoid confusion in the future.</p><ul><li><strong>Mock (noun)</strong> – An object which acts as a double for another object.</li><li><strong>Mock (verb)</strong> – To create a mock object or stub a method.</li><li><strong>Spy (noun)</strong> – An object which decorates an existing object and allows for stubbing of methods of that object and verification of calls into that object.</li><li><strong>Spy (verb)</strong> – To create and use a Spy object.</li><li><strong>Stub (noun)</strong> – An object which can provide ‘canned answers’ when it’s methods are called.</li><li><strong>Stub (verb)</strong> – To create a canned answer.</li><li><strong>Partial Mock, Partial Stub (verb)</strong> – Another term for a spy with some of it’s methods stubbed.</li></ul><p>Technically, Mockito is a Test Spy Framework rather than a Mocking Framework, because it allows us to create spies and verify behaviour, as well as creating mock objects with stubbed behaviour.</p><p>As we saw in the <a href="http://www.javacodegeeks.com/2015/09/getting-started-with-mockito/">last tutorial</a>, we can use the <code>when().thenReturn()</code> methods to stub behaviour of a given interface or class. We will now look at all the ways that we can provide stubs for Mocks and Spies.</p><h2><a name="void"></a>3. Stubbing a void method</h2><p>Given the following interface:</p><pre class="brush:java">public interface Printer {

	void printTestPage();

}
</pre><p>And the following simplistic String buffer based ‘word processor’ class which uses it:</p><pre class="brush:java">public class StringProcessor {

	private Printer printer;
	private String currentBuffer;

	public StringProcessor(Printer printer) {
		this.printer = printer;
	}

	public Optional&lt;String&gt; statusAndTest() {
		printer.printTestPage();
		return Optional.ofNullable(currentBuffer);
	}

}
</pre><p>We want to write a test method which will test that the current buffer is absent after construction and handle the printing of the test page.</p><p>Here is our test class:</p><pre class="brush:java">public class StringProcessorTest {

	private Printer printer;

	@Test
	public void internal_buffer_should_be_absent_after_construction() {
		// Given
		StringProcessor processor = new StringProcessor(printer);

		// When
		Optional&lt;String&gt; actualBuffer = processor.statusAndTest();

		// Then
		assertFalse(actualBuffer.isPresent());
	}
}
</pre><p>We know that <code>statusAndTest()</code> will involve a call to the <code>printTestPage()</code> method of the <code>Printer</code> and that the <code>printer</code> reference is not initialized so we will end up with a <code>NullPointerException</code> if we execute this test. In order to avoid this we simply need to annotate the test class to tell JUnit to run it with Mockito and annotate the Printer as a mock to tell mockito to create a mock for it.</p><pre class="brush:java">@RunWith(MockitoJUnitRunner.class)
public class StringProcessorTest {

	@Mock
	private Printer printer;

	@Test
	public void internal_buffer_should_be_absent_after_construction() {
		// Given
		StringProcessor processor = new StringProcessor(printer);

		// When
		Optional&lt;String&gt; actualBuffer = processor.statusAndTest();

		// Then
		assertFalse(actualBuffer.isPresent());
	}

}
</pre><p>Now we can execute our test and Mockito will create an implementation of Printer for us and assign an instance of it to the printer variable. We will no longer get a NullPointerException.</p><p>But what if <code>Printer</code> was a class that actually did some work, like printing a physical test page. What if we had chosen to <code>@Spy</code> on it instead of creating a <code>@Mock</code>? Remember a Spy will call the real methods of the spied upon Class unless they are stubbed. We would want to avoid doing anything real when the method was called. Let’s make a simple implementation of Printer:</p><pre class="brush:java">public class SysoutPrinter implements Printer {

	@Override
	public void printTestPage() {
		System.out.println("This is a test page");
	}

}
</pre><p>And add it as a Spy to our test class and add a new method to test using it:</p><pre class="brush:java">@Spy
	private SysoutPrinter sysoutPrinter;

@Test
	public void internal_buffer_should_be_absent_after_construction_sysout() {
		// Given
		StringProcessor processor = new StringProcessor(sysoutPrinter);

		// When
		Optional&lt;String&gt; actualBuffer = processor.statusAndTest();

		// Then
		assertFalse(actualBuffer.isPresent());
	}
</pre><p>If you execute this test now you will see the following output on the console:</p><pre class="brush:shell">This is a test page</pre><p>This confirms that our test case is actually executing the real method of the <code>SysoutPrinter</code> class due to the fact that it is a Spy and not a Mock. If the class actually executed a real physical print of a test page this would be highly undesirable!</p><p>When we are doing a partial mock or Spy we can stub the method that is called to ensure that nothing happens in it using <code>org.mockito.Mockito.doNothing()</code>.</p><p>Let’s add the following import and test:</p><pre class="brush:java">import static org.mockito.Mockito.*;

@Test
	public void internal_buffer_should_be_absent_after_construction_sysout_with_donothing() {
		// Given
		StringProcessor processor = new StringProcessor(sysoutPrinter);
		doNothing().when(sysoutPrinter).printTestPage();

		// When
		Optional&lt;String&gt; actualBuffer = processor.statusAndTest();

		// Then
		assertFalse(actualBuffer.isPresent());
	}
</pre><p>Note the chaining of the methods <code>doNothing.when(sysoutPrinter).printTestPage()</code>: this tells Mockito that when the void method <code>printTestPage</code> of the <code>@Spy</code> <code>sysoutPrinter</code> is called that the real method should not be executed and nothing should be done instead. Now when we execute this test we see no output to the screen.</p><p>What if we expand our Printer interface to throw a new <code>PrinterNotConnectedException</code> exception if the physical printer is not connected. How can we test this scenario?</p><p>First of all let’s create the new, very simple, exception class.</p><pre class="brush:java">public class PrinterNotConnectedException extends Exception {

	private static final long serialVersionUID = -6643301294924639178L;

}
</pre><p>And modify our interface to throw it:</p><pre class="brush:java">void printTestPage() throws PrinterNotConnectedException;
</pre><p>We also need to modify <code>StringProcessor</code> to do something with the exception if it’s thrown. For the sake of simplicity we will just throw the exception back out to the calling class.</p><pre class="brush:java">public Optional&lt;String&gt; statusAndTest() throws PrinterNotConnectedException
</pre><p>Now we want to test that the exception is passed up to the calling class, so we have to force the Printer to throw it. In a similar way to <code>doNothing()</code> we can use <code>doThrow</code> to force the exception.</p><p>Let’s add the following test:</p><pre class="brush:java">@Test(expected = PrinterNotConnectedException.class)
	public void printer_not_connected_exception_should_be_thrown_up_the_stack() throws Exception {
		// Given
		StringProcessor processor = new StringProcessor(printer);
		doThrow(new PrinterNotConnectedException()).when(printer).printTestPage();

		// When
		Optional&lt;String&gt; actualBuffer = processor.statusAndTest();

		// Then
		assertFalse(actualBuffer.isPresent());
	}
</pre><p>Here we see that we can use <code>doThrow()</code> to throw any kind of Exception we want. In this case we are throwing <code>PrinterNotConnectedException</code> which will satisfy our Test.</p><p>Now that we’ve learned how to stub void methods, let’s look at returning some data.</p><h2><a name="return"></a>4. Stubbing return values</h2><p>Let’s start to create a Data Access Object for persisting and retrieving Customer objects from a database. This DAO will use the enterprise java <code>EntityManager</code> interface under the hood to do the actual DB interactions.</p><p>In order to use <code>EntityManager</code> we will use the Hibernate implementation of JPA 2.0, add the following dependency to your pom.xml:</p><pre class="brush:xml">&lt;dependency&gt;
			&lt;groupId&gt;org.hibernate.javax.persistence&lt;/groupId&gt;
			&lt;artifactId&gt;hibernate-jpa-2.0-api&lt;/artifactId&gt;
			&lt;version&gt;1.0.1.Final&lt;/version&gt;
		&lt;/dependency&gt;

</pre><p>Now we will create a simple Customer entity to represent the Customer being persisted.</p><pre class="brush:java">@Entity
public class Customer {

	@Id @GeneratedValue
	private long id;
	private String name;
	private String address;

	public Customer() {

	}

	public Customer(long id, String name, String address) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
	}

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

}
</pre><p>We will now create a skeleton DAO which has uses <code>@PersistenceContext</code> to configure an injected <code>EntityManager</code>. We don’t need to worry about using the Java Persistence Architecture (JPA) or how it works – we will be using Mockito to bypass it completely, but this serves as a good real world example of Mockito in action.</p><pre class="brush:java">public class CustomerDAO {

	@PersistenceContext
	EntityManager em;

	public CustomerDAO(EntityManager em) {
		this.em = em;
	}

}
</pre><p>We will be adding basic Retrieve and Update functionality to our DAO and testing it using Mockito.</p><p>To start with the Retrieve method – we will pass in an ID and return the appropriate Customer from the DB, if they exist.</p><pre class="brush:java">public Optional&lt;Customer&gt; findById(long id) throws Exception {
		return Optional.ofNullable(em.find(Customer.class, id));
	}
</pre><p>Here we use Java <code>Optional</code> to avoid having to do null checks on the results.</p><p>Now we can add tests to test this method where the customer is found, and the customer is not found – we will stub the <code>find()</code> method to return an appropriate Optional in each case, using the Mockito methods <code>org.mockito.Mockito.when</code> and <code>thenReturn()</code></p><p>Lets create our Test class as follows (<code>import static org.mockito.Mockito.*;</code> for Mockito methods):</p><pre class="brush:java">@RunWith(MockitoJUnitRunner.class)
public class CustomerDAOTest {

	private CustomerDAO dao;

	@Mock
	private EntityManager mockEntityManager;

	@Before
	public void setUp() throws Exception {
		dao = new CustomerDAO(mockEntityManager);
	}

	@Test
	public void finding_existing_customer_should_return_customer() throws Exception {
		// Given
		long expectedId = 10;
		String expectedName = "John Doe";
		String expectedAddress = "21 Main Street";
		Customer expectedCustomer = new Customer(expectedId, expectedName, expectedAddress);

		when(mockEntityManager.find(Customer.class, expectedId)).thenReturn(expectedCustomer);

		// When
		Optional&lt;Customer&gt; actualCustomer = dao.findById(expectedId);

		// Then
		assertTrue(actualCustomer.isPresent());
		assertEquals(expectedId, actualCustomer.get().getId());
		assertEquals(expectedName, actualCustomer.get().getName());
		assertEquals(expectedAddress, actualCustomer.get().getAddress());
	}
}
</pre><p>We see the usual boilerplate for enabling mockito, mocking the <code>EntityManger</code> and injecting it into the class under test. Let’s look at the test method.</p><p>The first lines involve creating a <code>Customer</code> with known expected values, we then see the call to Mockito telling it to return this customer when the <code>EntityManager.find()</code> method is called with the specific input parameters we give it. We then do the actual execution of the <code>findById()</code> method and a group of asserts to ensure we got back the expected values.</p><p>Let’s disect the Mockito call:</p><pre class="brush:java">when(mockEntityManager.find(Customer.class, expectedId)).thenReturn(expectedCustomer);
</pre><p>This demonstrates the powerful, elegant syntax of Mockito. It almost reads like plain English. When the <code>find()</code> method of the <code>mockEntityManager</code> object is called with the specific inputs <code>Customer.class</code> and <code>expectedId</code>, then return the <code>expectedCustomer</code> object.</p><p>If you invoke a Mock with parameters that you haven’t told it to expect then it will just return null, as the following test demonstrates:</p><pre class="brush:java">@Test
	public void invoking_mock_with_unexpected_argument_returns_null() throws Exception {
		// Given
		long expectedId = 10L;
		long unexpectedId = 20L;
		String expectedName = "John Doe";
		String expectedAddress = "21 Main Street";
		Customer expectedCustomer = new Customer(expectedId, expectedName, expectedAddress);

		when(mockEntityManager.find(Customer.class, expectedId)).thenReturn(expectedCustomer);

		// When
		Optional&lt;Customer&gt; actualCustomer = dao.findById(unexpectedId);

		// Then
		assertFalse(actualCustomer.isPresent());
	}
</pre><p>You can also stub a Mock several different times to achieve different behaviours depending on inputs. Let’s get the Mock to return a different customer depending on the input ID:</p><pre class="brush:java">@Test
	public void invoking_mock_with_different_argument_returns_different_customers() throws Exception {
		// Given
		long expectedId1 = 10L;
		String expectedName1 = "John Doe";
		String expectedAddress1 = "21 Main Street";
		Customer expectedCustomer1 = new Customer(expectedId1, expectedName1, expectedAddress1);

		long expectedId2 = 20L;
		String expectedName2 = "Jane Deer";
		String expectedAddress2 = "46 High Street";
		Customer expectedCustomer2 = new Customer(expectedId2, expectedName2, expectedAddress2);

		when(mockEntityManager.find(Customer.class, expectedId1)).thenReturn(expectedCustomer1);
		when(mockEntityManager.find(Customer.class, expectedId2)).thenReturn(expectedCustomer2);

		// When
		Optional&lt;Customer&gt; actualCustomer1 = dao.findById(expectedId1);
		Optional&lt;Customer&gt; actualCustomer2 = dao.findById(expectedId2);

		// Then
		assertEquals(expectedName1, actualCustomer1.get().getName());
		assertEquals(expectedName2, actualCustomer2.get().getName());
	}
</pre><p>You can even chain returns to get the mock to do something different on each invocation. Note that if you invoke the mock more times than you have stubbed behaviour for it will continue to behave according to the last stub forever.</p><pre class="brush:java">@Test
	public void invoking_mock_with_chained_stubs_returns_different_customers() throws Exception {
		// Given
		long expectedId1 = 10L;
		String expectedName1 = "John Doe";
		String expectedAddress1 = "21 Main Street";
		Customer expectedCustomer1 = new Customer(expectedId1, expectedName1, expectedAddress1);

		long expectedId2 = 20L;
		String expectedName2 = "Jane Deer";
		String expectedAddress2 = "46 High Street";
		Customer expectedCustomer2 = new Customer(expectedId2, expectedName2, expectedAddress2);

		when(mockEntityManager.find(Customer.class, expectedId1))
			.thenReturn(expectedCustomer1).thenReturn(expectedCustomer2);

		// When
		Optional&lt;Customer&gt; actualCustomer1 = dao.findById(expectedId1);
		Optional&lt;Customer&gt; actualCustomer2 = dao.findById(expectedId1);

		// Then
		assertEquals(expectedName1, actualCustomer1.get().getName());
		assertEquals(expectedName2, actualCustomer2.get().getName());
	}
</pre><p>Note that we have input the same ID into both calls, the different behaviour is goverened by the second <code>theReturn()</code> method, this only works because the <code>when()</code> part of the stub explicitly expects and input of <code>expectedId1</code>, if we had passed <code>expectedId2</code> we would have gotten a null response from the mock due to the fact that it is not the expected value in the stub.</p><p>Now let’s test the case where the customer is missing.</p><pre class="brush:java">@Test
	public void finding_missing_customer_should_return_null() throws Exception {
		// Given
		long expectedId = 10L;
		when(mockEntityManager.find(Customer.class, expectedId)).thenReturn(null);

		// When
		Optional&lt;Customer&gt; actualCustomer = dao.findById(expectedId);

		// Then
		assertFalse(actualCustomer.isPresent());
	}
</pre><p>Here we can see that we use the same syntax but this time use it to return null.</p><p>Mockito allows you to use VarArgs in <code>thenReturn</code> to stub consecutive calls so if we wanted to we could roll the previous two tests into one as follows:</p><pre class="brush:java">@Test
	public void finding_customer_should_respond_appropriately() throws Exception {
		// Given
		long expectedId = 10L;
		String expectedName = "John Doe";
		String expectedAddress = "21 Main Street";
		Customer expectedCustomer1 = new Customer(expectedId, expectedName, expectedAddress);
		Customer expectedCustomer2 = null;

		when(mockEntityManager.find(Customer.class, expectedId)).thenReturn(expectedCustomer1, expectedCustomer2);

		// When
		Optional&lt;Customer&gt; actualCustomer1 = dao.findById(expectedId);
		Optional&lt;Customer&gt; actualCustomer2 = dao.findById(expectedId);

		// Then
		assertTrue(actualCustomer1.isPresent());
		assertFalse(actualCustomer2.isPresent());
	}
</pre><p>What if our find method throws an exception due to some persistence issue? Let’s test that!</p><pre class="brush:java">@Test(expected=IllegalArgumentException.class)
	public void finding_customer_should_throw_exception_up_the_stack() throws Exception {
		// Given
		long expectedId = 10L;

		when(mockEntityManager.find(Customer.class, expectedId)).thenThrow(new IllegalArgumentException());

		// When
		dao.findById(expectedId);

		// Then
		fail("Exception should be thrown.");
	}
</pre><p>We have used the <code>thenThrow()</code> method to throw our exception. Contrast this syntax to our use of <code>doThrow()</code> when stubbing void methods. These are two similar but different methods – <code>thenThrow()</code> will not work with void methods.</p><h3><a name="answer"></a>4.1. Using Answers</h3><p>We saw above that we created a customer with certain expected values. If we wanted to create a few known test users and return them base don their Id’s we could use an <code>Answer</code> which we could return from our <code>when()</code> calls. <code>Answer</code> is a Generic type provided by Mockito for providing ‘canned responses’. It’s <code>answer()</code> method takes an <code>InvocationOnMock</code> object which contains certain information about the current mock method call.</p><p>Let’s create 3 customers and an Answer to choose which one to return based on the input ID.</p><p>First the 3 customers are added as private members of the test class.</p><pre class="brush:java">private Customer homerSimpson, bruceWayne, tyrionLannister;
</pre><p>Then add a private <code>setupCustomers</code> method to initialize them and call it from the <code>@Before</code> method.</p><pre class="brush:java">@Before
	public void setUp() throws Exception {
		dao = new CustomerDAO(mockEntityManager);
		setupCustomers();
	}

	private void setupCustomers() {
		homerSimpson = new Customer(1, "Homer Simpson", "Springfield");
		bruceWayne = new Customer(2, "Bruce Wayne", "Gotham City");
		tyrionLannister = new Customer(2, "Tyrion Lannister", "Kings Landing");
	}
</pre><p>And now we can create an <code>Answer</code> to return an appropriate Customer based on the ID which was passed to the <code>find()</code> method passed to the mock EntityManager at runtime.</p><pre class="brush:java">private Answer&lt;Customer&gt; withCustomerById = new Answer&lt;Customer&gt;() {
		@Override
		public Customer answer(InvocationOnMock invocation) throws Throwable {
			Object[] args = invocation.getArguments();
			int id = ((Long)args[1]).intValue(); // Cast to int for switch.
			switch (id) {
			case 1 : return homerSimpson;
			case 2 : return bruceWayne;
			case 3 : return tyrionLannister;
			default : return null;
			}
		}
	};
</pre><p>We can see that we use <code>InvocationOnMock</code> to pull the arguments which were passed into the Mock method invocation. We know that the second argument is the ID so we can read that and determine the appropriate Customer to return. The name of the answer <code>withCustomerById</code> will fit in with our mock syntax later.</p><p>Now let’s write a test which demonstrates this answer in action.</p><pre class="brush:java">@Test
	public void finding_customer_by_id_returns_appropriate_customer() throws Exception {
		// Given
		long[] expectedId = {1, 2, 3};

		when(mockEntityManager.find(eq(Customer.class), anyLong())).thenAnswer(withCustomerById);

		// When
		Optional&lt;Customer&gt; actualCustomer0 = dao.findById(expectedId[0]);
		Optional&lt;Customer&gt; actualCustomer1 = dao.findById(expectedId[1]);
		Optional&lt;Customer&gt; actualCustomer2 = dao.findById(expectedId[2]);

		// Then
		assertEquals("Homer Simpson", actualCustomer0.get().getName());
		assertEquals("Bruce Wayne", actualCustomer1.get().getName());
		assertEquals("Tyrion Lannister", actualCustomer2.get().getName());
	}
</pre><p>Let’s look at the stubbing line in detail.</p><pre class="brush:java">when(mockEntityManager.find(eq(Customer.class), anyLong())).thenAnswer(withCustomerById);
</pre><p>Here we see a couple of new things. The first thing is that instead of doing <code>when().thenReturn()</code> we do <code>when().thenAnswer()</code> and provide our <code>withCustomerById</code> Answer as the Answer to be given. The second thing is that we don’t use a real value for the ID passed into <code>mockEntityManager.find()</code> instead we use static <code>org.mockito.Matchers.anyLong()</code>. This is a <code>Matcher</code> and it is used to get Mockito to fire the Answer without checking that a particular Long value has been passed in. Matchers let us ignore the parameters to the mock call and instead concentrate only on the return value.</p><p>We also decorated <code>Customer.class</code> with the <code>eq()</code> Matcher – this is due to the fact that you can’t mix real values and matchers in Mock method calls, you either have to have all parameters as Matchers or all parameters as real values. <code>eq()</code> provides a Matcher which only matches when the runtime parameter is equal to the specified parameter in the stub. This let’s us continue to only return the Answer when the input class type is of type Customer.class without specifying a specific ID.</p><p>What all this means is that the three invocations of <code>mockEntityManager.find()</code> with different ID’s all result in the same Answer being given, and as we have coded the Answer to respond with appropriate Customer objects for different ID’s we have successfully mocked an <code>EntityManager</code> capable of mimicking realistic behaviour.</p><h3><a name="bdd"></a>4.2. A note on Behaviour Driven Development test conventions</h3><p>You may have noticed that we have adopted a convention in our unit tests of splitting the test into 3 parts – // Given, // When and // Then. This convention is called Behaviour Driven Development and is a very logical way of designing unit tests.</p><ul><li>/<strong>/ Given</strong> is the setup phase where we initialize data and stub mock classes. It is the same as stating ‘given the following initial conditions’.</li><li><strong>// When</strong> is the execution phase where we execute the method under test and capture any returned objects.</li><li><strong>// Then</strong> is the verification phase where we place our assertion logic which checks if the method behaved as expected.</li></ul><p>Mockito supports BDD out of the box in the <code>org.mockito.BDDMockito</code> class. It replaces the normal stubbing methods – <code>when()</code>, <code>thenReturn()</code>, <code>thenThrow()</code>, <code>thenAnswer()</code> etc with BDD doppelgangers – <code>given()</code>, <code>willReturn()</code>, <code>willThrow()</code>, <code>willAnswer()</code>. This allows us to avoid using <code>when()</code> in the // Given section, as it may be confusing.</p><p>Because we are using the BDD convention in our tests we will also use the methods provided by BDDMockito.</p><p>Lets rewrite <code>finding_existing_customer_should_return_customer()</code> using BDDMockito syntax.</p><pre class="brush:java">import static org.mockito.BDDMockito.*;

@Test
	public void finding_existing_customer_should_return_customer_bdd() throws Exception {
		// Given
		long expectedId = 10L;
		String expectedName = "John Doe";
		String expectedAddress = "21 Main Street";
		Customer expectedCustomer = new Customer(expectedId, expectedName, expectedAddress);

		given(mockEntityManager.find(Customer.class, expectedId)).willReturn(expectedCustomer);

		// When
		Optional&lt;Customer&gt; actualCustomer = dao.findById(expectedId);

		// Then
		assertTrue(actualCustomer.isPresent());
		assertEquals(expectedId, actualCustomer.get().getId());
		assertEquals(expectedName, actualCustomer.get().getName());
		assertEquals(expectedAddress, actualCustomer.get().getAddress());
	}
</pre><p>The logic of the test has not changed, it is just more readable in BDD form.</p><h3><a name="eclipse"></a>4.3. A tip on using Mockito static method in Eclipse</h3><p>It can be a pain manually adding static imports for the various Mockito static methods if you want to avoid importing <code>org.mockito.Mockito.*</code> etc. In order to enable content assist in Eclipse for these methods you only need to launch Window -&gt; Preferences and go to Java/Editor/Content Assist/Favorites in the left nav. After that add the following as “New Type…” as per Figure 1.</p><ul><li><code>org.mockito.Mockito</code></li><li><code>org.mockito.Matchers</code></li><li><code>org.mockito.BDDMockito</code></li></ul><p>This will add the Mockito static methods to Eclipse Content Assist allowing you to autocomplete and import them as you use them.</p><div id="attachment_5811" style="width: 714px" class="wp-caption aligncenter"><a href="http://www.javacodegeeks.com/wp-content/uploads/2015/09/image001.png"><img class="size-full wp-image-5811" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/image001.png" alt="Figure 1 - Content Assist Favorites" width="704" height="778"></a><p class="wp-caption-text">Figure 1 – Content Assist Favorites</p></div><h3><a name="multiple"></a>4.4. Using multiple Mocks</h3><p>We will now look at using multiple mocks in combination together. Lets add a method to our DAO to return a list of all available Customers.</p><pre class="brush:java">public List&lt;Customer&gt; findAll() throws Exception {
		TypedQuery&lt;Customer&gt; query = em.createQuery("select * from CUSTOMER", Customer.class);
		return query.getResultList();
	}
</pre><p>Here we see that the <code>createQuery()</code> method of <code>EntityManager</code> returns a generic typed <code>TypedQuery</code>. It takes in as parameters a SQL String and a class which is the return type. <code>TypedQuery</code> itself exposes several methods including <code>List getResultList()</code> which can be used to execute queries which return multiple values, such as our <code>select * from CUSTOMER</code> query above.</p><p>In order to write a test for this method we will want to create a Mock of <code>TypedQuery</code>.</p><pre class="brush:java">@Mock
private TypedQuery&lt;Customer&gt; mockQuery;
</pre><p>Now we can stub this mock query to return a list of known customers. Let’s create an answer to do this, and reuse the known Customers which we created previously. You may have noticed that Answer is a Functional Interface, having only one method. We are using Java 8 so we can create a lambda expression to represent our Answer inline, rather than an anonymous inner class like we did in the previous Answer example.</p><pre class="brush:java">given(mockQuery.getResultList()).willAnswer(i -&gt; Arrays.asList(homerSimpson, bruceWayne, tyrionLannister));
</pre><p>Of course we could also code the above stub as</p><pre class="brush:java">given(mockQuery.getResultList()).willReturn(Arrays.asList(homerSimpson, bruceWayne, tyrionLannister));given
</pre><p>which demonstrates the flexibility of Mockito – there are always several different ways of doing the same thing.</p><p>Now we have stubbed the behaviour of the mock <code>TypedQuery</code> we can stub the mock <code>EntityManager</code> to return it when requested. Rather than bringing SQL into our test case we will just use the <code>anyString()</code> Matcher to get the mock <code>createQuery()</code> to fire, of course we will also surround the class parameter with an <code>eq()</code> matcher.</p><p>The full test looks like this:</p><pre class="brush:java">@Test
	public void finding_all_customers_should_return_all_customers() throws Exception {
		// Given
		given(mockQuery.getResultList()).willAnswer(i -&gt; Arrays.asList(homerSimpson, bruceWayne, tyrionLannister));
		given(mockEntityManager.createQuery(anyString(), eq(Customer.class))).willReturn(mockQuery);

		// When
		List&lt;Customer&gt; actualCustomers = dao.findAll();

		// Then
		assertEquals(actualCustomers.size(), 3);
	}
</pre><h3><a name="test"></a>4.5. Test Yourself! Test Update!</h3><p>Let’s add the <code>Update()</code> DAO method:</p><pre class="brush:java">	public Customer update(Customer customer) throws Exception {
		return em.merge(customer);
	}

</pre><p>Now see if you can create a test for it. A possible solution has been written in the example code project included with this tutorial. Remember that there are many ways of doing the same thing in Mockito, see if you can think of a few!</p><h2><a name="matchers"></a>5. Argument Matchers</h2><p>The natural behaviour of Mocktio is to use the <code>equals()</code> method of the object which is passed in as a parameter to see if a particular stubbed behaviour applies. It is possible to avoid using real objects and variables when stubbing however, if it is unimportant to us what those values are. We do this by using Mockito Argument Matchers</p><p>We have already seen a couple of the Mockito argument matchers in operation: <code>anyLong()</code>, <code>anyString()</code> and <code>eq</code>. We use these matchers when we don’t particularly care about the input to the Mock, we are only interested in coding it’s return behaviour, and we want it to behave the same way under all conditions.</p><p>As already noted, but worth paying special attention to, is that when using argument matchers all arguments must be argument matchers, you can not mix and match real values with argument matchers or you will get a runtime error from Mockito.</p><p>Argument Matchers all extend <code>org.mockito.ArgumentMatcher</code> and Mockito includes a library of ready made argument matchers which can be accessed through the static methods of <code>org.mockito.Matchers</code>, to use them just import <code>org.mockito.Matchers.*</code>;</p><p>You can look at the javadoc for <code>org.mockito.Matchers</code> to see all the Matchers that Mockito provides, while the following test class demonstrates the usage of some of them:</p><pre class="brush:java">package com.javacodegeeks.hughwphamill.mockito.stubbing;

import static org.junit.Assert.*;
import static org.mockito.Matchers.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.runners.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class MatchersTest {

	public interface TestForMock {

		public boolean usesPrimitives(int i, float f, double d, byte b, boolean bool);

		public boolean usesObjects(String s, Object o, Integer i);

		public boolean usesCollections(List&lt;String&gt; list, Map&lt;Integer, String&gt; map, Set&lt;Object&gt; set);

		public boolean usesString(String s);

		public boolean usesVarargs(String... s);

		public boolean usesObject(Object o);

	}

	@Mock
	TestForMock test;

	@Test
	public void test() {

		// default behaviour is to return false
		assertFalse(test.usesString("Hello"));

		when(test.usesObjects(any(), any(), any())).thenReturn(true);
		assertTrue(test.usesObjects("Hello", new Thread(), 17));
		Mockito.reset(test);

		when(test.usesObjects(anyString(), anyObject(), anyInt())).thenReturn(true);
		assertTrue(test.usesObjects("Hi there", new Float(18), 42));
		Mockito.reset(test);

		when(test.usesPrimitives(anyInt(), anyFloat(), anyDouble(), anyByte(), anyBoolean())).thenReturn(true);
		assertTrue(test.usesPrimitives(1, 43.4f, 3.141592654d, (byte)2, false));
		Mockito.reset(test);

		// Gives unchecked type conversion warning
		when(test.usesCollections(anyList(), anyMap(), anySet())).thenReturn(true);
		assertTrue(test.usesCollections(Arrays.asList("Hello", "World"), Collections.EMPTY_MAP, Collections.EMPTY_SET));
		Mockito.reset(test);

		// Gives no warning
		when(test.usesCollections(anyListOf(String.class), anyMapOf(Integer.class, String.class), anySetOf(Object.class))).thenReturn(true);
		assertTrue(test.usesCollections(Collections.emptyList(), Collections.emptyMap(), Collections.emptySet()));
		Mockito.reset(test);

		// eq() must match exactly
		when(test.usesObjects(eq("Hello World"), any(Object.class),anyInt())).thenReturn(true);
		assertFalse(test.usesObjects("Hi World", new Object(), 360));
		assertTrue(test.usesObjects("Hello World", new Object(), 360));
		Mockito.reset(test);

		when(test.usesString(startsWith("Hello"))).thenReturn(true);
		assertTrue(test.usesString("Hello there"));
		Mockito.reset(test);

		when(test.usesString(endsWith("something"))).thenReturn(true);
		assertTrue(test.usesString("isn't that something"));
		Mockito.reset(test);

		when(test.usesString(contains("second"))).thenReturn(true);
		assertTrue(test.usesString("first, second, third."));
		Mockito.reset(test);

		// Regular Expression
		when(test.usesString(matches("^\\\\w+$"))).thenReturn(true);
		assertTrue(test.usesString("Weak_Password1"));
		assertFalse(test.usesString("@Str0nG!pa$$woR&gt;%42"));
		Mockito.reset(test);

		when(test.usesString((String)isNull())).thenReturn(true);
		assertTrue(test.usesString(null));
		Mockito.reset(test);

		when(test.usesString((String)isNotNull())).thenReturn(true);
		assertTrue(test.usesString("Anything"));
		Mockito.reset(test);

		// Object Reference
		String string1 = new String("hello");
		String string2 = new String("hello");
		when(test.usesString(same(string1))).thenReturn(true);
		assertTrue(test.usesString(string1));
		assertFalse(test.usesString(string2));
		Mockito.reset(test);

		// Compare to eq()
		when(test.usesString(eq(string1))).thenReturn(true);
		assertTrue(test.usesString(string1));
		assertTrue(test.usesString(string2));
		Mockito.reset(test);

		when(test.usesVarargs(anyVararg())).thenReturn(true);
		assertTrue(test.usesVarargs("A","B","C","D","E"));
		assertTrue(test.usesVarargs("ABC", "123"));
		assertTrue(test.usesVarargs("Hello!"));
		Mockito.reset(test);

		when(test.usesObject(isA(String.class))).thenReturn(true);
		assertTrue(test.usesObject("A String Object"));
		assertFalse(test.usesObject(new Integer(7)));
		Mockito.reset(test);

		// Field equality using reflection
		when(test.usesObject(refEq(new SomeBeanWithoutEquals("abc", 123)))).thenReturn(true);
		assertTrue(test.usesObject(new SomeBeanWithoutEquals("abc", 123)));
		Mockito.reset(test);

		// Compare to eq()
		when(test.usesObject(eq(new SomeBeanWithoutEquals("abc", 123)))).thenReturn(true);
		assertFalse(test.usesObject(new SomeBeanWithoutEquals("abc", 123)));
		Mockito.reset(test);

		when(test.usesObject(eq(new SomeBeanWithEquals("abc", 123)))).thenReturn(true);
		assertTrue(test.usesObject(new SomeBeanWithEquals("abc", 123)));
		Mockito.reset(test);
	}

	public class SomeBeanWithoutEquals {
		private String string;
		private int number;

		public SomeBeanWithoutEquals(String string, int number) {
			this.string = string;
			this.number = number;
		}
	}

	public class SomeBeanWithEquals {
		private String string;
		private int number;

		public SomeBeanWithEquals(String string, int number) {
			this.string = string;
			this.number = number;
		}

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + number;
			result = prime * result
					+ ((string == null) ? 0 : string.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			SomeBeanWithEquals other = (SomeBeanWithEquals) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (number != other.number)
				return false;
			if (string == null) {
				if (other.string != null)
					return false;
			} else if (!string.equals(other.string))
				return false;
			return true;
		}

		private MatchersTest getOuterType() {
			return MatchersTest.this;
		}
	}
}
</pre><p>It’s also possible to create your own Matchers by extending <code>org.mockito.ArgumentMatcher</code>. Let’s create a matcher which fires if a List contains a particular element. We’ll also create a static convenience method for creating the Matcher which uses <code>argThat</code> to convert the Matcher into a List for use within the stubbing call. We will implement the <code>matches()</code> method to call the <code>contains</code> method of <code>List</code> to do our actual contains check.</p><pre class="brush:java">public class ListContainsMatcher&lt;T&gt; extends ArgumentMatcher&lt;List&lt;T&gt;&gt; {

	private T element;

	public ListContainsMatcher(T element) {
		this.element = element;
	}

	@Override
	public boolean matches(Object argument) {
		@SuppressWarnings("unchecked")
		List&lt;T&gt; list = (List&lt;T&gt;) argument;
		return list.contains(element);
	}

	public static &lt;T&gt; List&lt;T&gt; contains(T element) {
		return argThat(new ListContainsMatcher&lt;&gt;(element));
	}
}
</pre><p>And now a test to demonstrate our new Matcher in action!</p><pre class="brush:java">@RunWith(MockitoJUnitRunner.class)
public class ListContainsMatcherTest {

	public interface TestClass {
		public boolean usesStrings(List&lt;String&gt; list);
		public boolean usesIntegers(List&lt;Integer&gt; list);
	}

	private List&lt;String&gt; stringList = Arrays.asList("Hello", "Java", "Code", "Geek");
	private List&lt;Integer&gt; integerList = Arrays.asList(1, 2, 3, 4, 5);

	@Mock
	TestClass test;

	@Test
	public void test() throws Exception {
		when(test.usesStrings(contains("Java"))).thenReturn(true);
		when(test.usesIntegers(contains(5))).thenReturn(true);
		assertTrue(test.usesIntegers(integerList));
		assertTrue(test.usesStrings(stringList));
		Mockito.reset(test);

		when(test.usesStrings(contains("Something Else"))).thenReturn(true);
		when(test.usesIntegers(contains(42))).thenReturn(true);
		assertFalse(test.usesStrings(stringList));
		assertFalse(test.usesIntegers(integerList));
		Mockito.reset(test);
	}
}
</pre><p>As an exercise try writing your own Matcher which will match if a Map contains a particular key/value pair.</p><h2><a name="partial"></a>6. Spies and Partial Stubbing</h2><p>As we saw before it’s possible to partially stub a class using the <code>@Spy</code> annotation. Partial stubbing allows us to use a real class in our tests and only stub the specific behaviours that concern us. The Mockito guidelines tell us that spies should be used carefully and occasionally, usually when dealing with legacy code. Best practice is not to use Spy to partially mock the class under test, but instead to partially mock dependencies. The class under test should always be a real object.</p><p>Let’s imagine that we are dealing with an image manipulation class which works on a <code>java.awt.BufferedImage</code>. This class will take in a <code>BufferedImage</code> into it’s constructor and expose a method to fill the image with random coloured vertical stripes and return a thumbnail of the image, based on the input thumbnail height.</p><pre class="brush:java">public class ImageProcessor {

	private BufferedImage image;

	public ImageProcessor(BufferedImage image) {
		this.image = image;
	}

	public Image overwriteImageWithStripesAndReturnThumbnail(int thumbHeight) {
		debugOutputColorSpace();

		Random random = new Random();
		Color color = new Color(random.nextInt(255), random.nextInt(255), random.nextInt(255));

		for (int x = 0; x &lt; image.getWidth(); x++) {
			if (x % 20 == 0) {
				color = new Color(random.nextInt(255), random.nextInt(255), random.nextInt(255));
				for (int y = 0; y &lt; image.getHeight(); y++) {
					image.setRGB(x, y, color.getRGB());
				}
			}
		}

		Image thumbnail = image.getScaledInstance(-1, thumbHeight, Image.SCALE_FAST);

		Image microScale = image.getScaledInstance(-1, 5, Image.SCALE_DEFAULT);
		debugOutput(microScale);
		return thumbnail;
	}

	private void debugOutput(Image microScale) {
		System.out.println("Runtime type of microScale Image is " + microScale.getClass());

	}

	private void debugOutputColorSpace() {
		for (int i=0; i&lt; image.getColorModel().getColorSpace().getNumComponents(); i++) {
			String componentName = image.getColorModel().getColorSpace().getName(i);
			System.out.println(String.format("Colorspace Component[%d]: %s", i, componentName));
		}
	}
}
</pre><p>There’s a lot going on in the <code>overwriteImageWithStripesAndReturnThumbnail()</code> method. The first thing it does is output some debug information about the Image’s Colorspace. Then it generates some random colours and paints them as horizontal stripes throughout the image, using the images width and height methods. It then does a scale operation to return an Image to represent the thumbnail. It then does a second scale operation to produce a small diagnostic micro Image and outputs the runtime class type of this micro Image as debug information.</p><p>We see a lot of interactions with the BufferedImage, most of which are totally internal or random. Ultimately when we want to verify the behaviour of our method the important thing to us is the first call to <code>getScaledInstance()</code> – our class works if the return value of our method is the object which is returned from getScaledInstance(). This is the behaviour of BufferedImage that it is important to us to stub. The problem we face is that there are a lot of other calls to BufferedImages methods. We don’t really care about the return values of these methods from the perspective of testing, but if we don’t encode behaviour for them somehow they will cause <code>NullPointerException</code>s and possibly other undesirable behaviour.</p><p>In order to get around this problem we will create a Spy for the BufferedImage and only stub the <code>getScaledInstance()</code> method which interests us.</p><p>Let’s create an empty test class with the class under test and Spy created, as well as a Mock for the returned thumbnail.</p><pre class="brush:java">@RunWith(MockitoJUnitRunner.class)
public class ImageProcessorTest {

	private ImageProcessor processor;

	@Spy
	private BufferedImage imageSpy = new BufferedImage(800, 600, BufferedImage.TYPE_INT_ARGB);
	@Mock
	Image mockThumbnail;

	@Before
	public void setup() {
		processor = new ImageProcessor(imageSpy);
	}
}
</pre><p>Note that BufferedImage has no default constructor so we’ve had to instantiate it ourselves using it’s parameterized constructor, if it had a default constructor we could have let Mockito instantiate it for us.</p><p>Now let’s make a first attempt at stubbing the behaviour we are interested in. It makes sense to ignore the input height, width and mode and go ahead and use Argument Matchers for all three. We end up with something like the following:</p><pre class="brush:java">given(imageSpy.getScaledInstance(anyInt(), anyInt(), anyInt())).willReturn(mockThumbnail);
</pre><p>Normally this would be the best way to stub for a Spy, however, there’s a problem in this case – imageSpy is a real BufferedImage and the stub call passed into <code>given()</code> is a real method call that is actually executed when the stub operation is run by the JVM. <code>getScaledInstance</code> requires that width and height be non zero so this call will result in an <code>IllegalArgumentException</code> being thrown.</p><p>One possible solution is to use real arguments in our stub call</p><pre class="brush:java">@Test
	public void scale_should_return_internal_image_scaled() throws Exception {
		// Given
		given(imageSpy.getScaledInstance(-1, 100, Image.SCALE_FAST)).willReturn(mockThumbnail);

		// When
		Image actualImage = processor.overwriteImageWithStripesAndReturnThumbnail(100);

		// Then
		assertEquals(actualImage, mockThumbnail);
	}
</pre><p>This test runs successfully and produces the following output on the console</p><pre class="brush:shell">Colorspace Component[0]: Red
Colorspace Component[1]: Green
Colorspace Component[2]: Blue
Runtime type of microScale Image is class sun.awt.image.ToolkitImage
</pre><p>A side effect of using real values is that the second call to <code>getScaledInstance()</code> to create the micro Image for debugging fails to match and the real method within BufferedImage is executed at this point, not our stubbed behaviour – which is why we see the real runtime type of the micro image being output, and not the Mockito mock implementation we would see if mockThumbnail had been passed to the debug output method.</p><p>But what if we want to continue using Argument Matchers? It’s possible to use the <code>doReturn()</code> method (normally used for void methods, if you recall) to stub the <code>getScaledInstance()</code> method without actually calling it at stub time.</p><pre class="brush:java">	@Test
	public void scale_should_return_internal_image_scaled_doReturn() throws Exception {
		// Given
		doReturn(mockThumbnail).when(imageSpy).getScaledInstance(anyInt(), anyInt(), anyInt());

		// When
		Image actualImage = processor.overwriteImageWithStripesAndReturnThumbnail(100);

		// Then
		assertEquals(actualImage, mockThumbnail);
	}
</pre><p>This gives the following output:</p><pre class="brush:shell">Colorspace Component[0]: Red
Colorspace Component[1]: Green
Colorspace Component[2]: Blue
Runtime type of microScale Image is class $java.awt.Image$$EnhancerByMockitoWithCGLIB$$72355119
</pre><p>You can see that the runtime type of the micro image is now the Mock implementation created by Mockito.  This is the case because both calls to <code>getScaledInstance</code> match the stub arguments and so the Mock thumbnail is returned from both calls.</p><p>There is a way to ensure the real method of the Spy is called in the second instance, this is by using the <code>doCallRealMethod()</code> method of Mockito.  As usual Mockito let’s you chain together stubbing methods to code different behaviour for consecutive invocations of the stubbed method which match the stub arguments.</p><pre class="brush:java">@Test
	public void scale_should_return_internal_image_scaled_doReturn_doCallRealMethod() throws Exception {
		// Given
		doReturn(mockThumbnail).doCallRealMethod().when(imageSpy).getScaledInstance(anyInt(), anyInt(), anyInt());

		// When
		Image actualImage = processor.overwriteImageWithStripesAndReturnThumbnail(100);

		// Then
		assertEquals(actualImage, mockThumbnail);
	}
</pre><p>Which gives the following output</p><pre class="brush:shell">Colorspace Component[0]: Red
Colorspace Component[1]: Green
Colorspace Component[2]: Blue
Runtime type of microScale Image is class sun.awt.image.ToolkitImage
</pre><h2><a name="conclusion"></a>7. Conclusion</h2><p>We have looked at a lot of different ways of stubbing behaviour for mocks and spies, and as alluded to there is a near infinite amount of ways one can stub behaviour.</p><p>The javadoc for Mockito is a good source of information on the Stubbing methods and particularly on the ArgumentMatchers which Mockito provides out of the box.</p><p>We have covered stubbing behaviour in detail and in the next tutorial we will look at verifying the behaviour of Mocks using the Mockito verification framework.</p><h2><a name="code"></a>8. Download the Source Code</h2><p>This was a lesson on Mockito Stubbing. You may download the source code here: <a href="http://www.javacodegeeks.com/wp-content/uploads/2015/09/mockito2-stubbing.zip">mockito2-stubbing</a></p></div> <span style="display:none"><a href="https://www.javacodegeeks.com/tag/mockito/" rel="tag">Mockito</a> <a href="https://www.javacodegeeks.com/tag/testing/" rel="tag">Testing</a></span>				<span style="display:none" class="updated">2015-11-15</span><div style="display:none" class="vcard author" itemprop="author" itemscope="" itemtype="http://schema.org/Person"><strong class="fn" itemprop="name"><a href="https://www.javacodegeeks.com/author/hugh-hamill/" title="Posts by Hugh Hamill" rel="author">Hugh Hamill</a></strong></div></div> </article><p class="post-tag">Tagged with: <a href="https://www.javacodegeeks.com/tag/mockito/" rel="tag">Mockito</a> <a href="https://www.javacodegeeks.com/tag/testing/" rel="tag">Testing</a></p> <script type="text/javascript">(function(){if(!window.mc4wp){window.mc4wp={listeners:[],forms:{on:function(event,callback){window.mc4wp.listeners.push({event:event,callback:callback});}}}}})();</script><form id="mc4wp-form-2" class="mc4wp-form mc4wp-form-29380 mc4wp-form-theme mc4wp-form-theme-red mc4wp-ajax" method="post" data-id="29380" data-name="Under The Post"><div class="mc4wp-form-fields"><div class="nlbox1"><h1>Do you want to know how to develop your skillset to become a <span style="color: #CAB43D; text-shadow: 1px 1px #835D5D;">Java Rockstar?</span></h1><div style="background: url(&#39;/wp-content/uploads/2015/01/books_promo.png&#39;) no-repeat; float:left; padding: 75px 145px 310px 170px; margin-top: -10px; margin-left: -35px;"></div><table style="margin-top: 20px; padding-left: 20px;"><tbody><tr><td style="vertical-align:top;"><h2>Subscribe to our newsletter to start Rocking <span style="text-decoration: underline;">right now!</span></h2><h3>To get you started we give you our best selling eBooks for <span style="color:#e01404; text-shadow: 1px 1px #C99924; font-size: 20px; line-height: 25px;">FREE!</span></h3><p>&nbsp;</p><h3><strong>1.</strong> JPA Mini Book</h3><h3><strong>2.</strong> JVM Troubleshooting Guide</h3><h3><strong>3.</strong> JUnit Tutorial for Unit Testing</h3><h3><strong>4.</strong> Java Annotations Tutorial<!--3--></h3><h3><strong>5.</strong> Java Interview Questions</h3><h3><strong>6.</strong> Spring Interview Questions</h3><h3><strong>7.</strong> Android UI Design</h3><p>&nbsp;</p><h3>and many more ....</h3><p>&nbsp;</p><p></p><p> <label for="mc4wp_email"><span style="font-weight: bold; font-size: 13pt;">Email address: </span></label> <input type="email" id="mc4wp_email" name="EMAIL" required="" placeholder="Your email address"></p><p>&nbsp;</p> <input type="submit" value="Sign up"></td></tr></tbody></table></div><div style="display: none;"><input type="text" name="_mc4wp_honeypot" value="" tabindex="-1" autocomplete="off"></div><input type="hidden" name="_mc4wp_timestamp" value="1496622076"><input type="hidden" name="_mc4wp_form_id" value="29380"><input type="hidden" name="_mc4wp_form_element_id" value="mc4wp-form-2"></div><div class="mc4wp-response"></div></form><div class="e3lan-post"><div id="div-gpt-ad-1415445260332-5" style="width:300px; height:250px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-5');});</script> <div id="google_ads_iframe_/70432299/JCG_Under-post_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_Under-post_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_Under-post_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource(2).html"></iframe></div></div></div><div id="comments"><h3 id="comments-title"> 2 comments</h3><ol class="commentlist"><li id="comment-85976"><div class="comment even thread-even depth-1 comment-wrap"><div class="comment-avatar"><img alt="" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/b822c6c40761030ac15cc39a8e1a976f" srcset="https://secure.gravatar.com/avatar/b822c6c40761030ac15cc39a8e1a976f?s=90&amp;d=mm&amp;r=g 2x" class="avatar avatar-45 photo" height="45" width="45"></div><div class="author-comment"> <cite class="fn"><a href="http://www.vsolutions.be/" rel="external nofollow" class="url">Rudy Vissers</a></cite><div class="comment-meta commentmetadata"><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html/#comment-85976">	June 24th, 2016 at 10:34 am</a></div></div><div class="clear"></div><div class="comment-content"><p>from<br> private void setupCustomers() {<br> homerSimpson = new Customer(1, “Homer Simpson”, “Springfield”);<br> bruceWayne = new Customer(2, “Bruce Wayne”, “Gotham City”);<br> tyrionLannister = new Customer(2, “Tyrion Lannister”, “Kings Landing”);<br> }<br> to<br> private void setupCustomers() {<br> homerSimpson = new Customer(1, “Homer Simpson”, “Springfield”);<br> bruceWayne = new Customer(2, “Bruce Wayne”, “Gotham City”);<br> tyrionLannister = new Customer(3, “Tyrion Lannister”, “Kings Landing”);<br> }<br> Change the following method and add a unit test to see the problem:<br> @Test<br> public void finding_customer_by_id_returns_appropriate_customer() throws Exception {<br> // Given<br> long[] expectedId = {1, 2, 3};</p><p>        when(mockEntityManager.find(eq(Customer.class), anyLong())).thenAnswer(withCustomerById);</p><p>        // When<br> Optional actualCustomer0 = dao.findById(expectedId[0]);<br> Optional actualCustomer1 = dao.findById(expectedId[1]);<br> Optional actualCustomer2 = dao.findById(expectedId[2]);</p><p>        // Then<br> assertEquals(“Homer Simpson”, actualCustomer0.get().getName());<br> assertEquals(“Bruce Wayne”, actualCustomer1.get().getName());<br> assertEquals(“Tyrion Lannister”, actualCustomer2.get().getName());<br> assertEquals(3L, actualCustomer2.get().getId());<br> }</p><p>Thanks for the good work!</p><p>Rudy</p></div><div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html?replytocom=85976#respond" onclick="return addComment.moveForm( &quot;comment-85976&quot;, &quot;85976&quot;, &quot;respond&quot;, &quot;44888&quot; )" aria-label="Reply to Rudy Vissers">Reply</a></div></div></li><li id="comment-88318"><div class="comment odd alt thread-odd thread-alt depth-1 comment-wrap"><div class="comment-avatar"><img alt="" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/bb1e8ffcdcc8e05f0bfca1d4a87e53c8" srcset="https://secure.gravatar.com/avatar/bb1e8ffcdcc8e05f0bfca1d4a87e53c8?s=90&amp;d=mm&amp;r=g 2x" class="avatar avatar-45 photo" height="45" width="45"></div><div class="author-comment"> <cite class="fn">vivek</cite><div class="comment-meta commentmetadata"><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html/#comment-88318">	September 9th, 2016 at 12:55 pm</a></div></div><div class="clear"></div><div class="comment-content"><p>nice game of throne example</p></div><div class="reply"><a rel="nofollow" class="comment-reply-link" href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html?replytocom=88318#respond" onclick="return addComment.moveForm( &quot;comment-88318&quot;, &quot;88318&quot;, &quot;respond&quot;, &quot;44888&quot; )" aria-label="Reply to vivek">Reply</a></div></div></li></ol><div id="respond" class="comment-respond"><h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://www.javacodegeeks.com/wp-comments-post.php" method="post" id="commentform" class="comment-form"><p class="comment-notes">Your email address will not be published. Required fields are marked <span class="required">*</span></p><p class="comment-form-comment"><label for="comment">Comment</label><textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" aria-required="true" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name</label> <span class="required">*</span><input id="author" name="author" type="text" value="" size="30" aria-required="true" required="true"></p><p class="comment-form-email"><label for="email">Email</label> <span class="required">*</span><input id="email" name="email" type="text" value="" size="30" aria-required="true" required="true"></p><p class="comment-form-url"><label for="url">Website</label><input id="url" name="url" type="text" value="" size="30"></p> <input type="hidden" name="_mc4wp_subscribe_wp-comment-form" value="0"><p class="mc4wp-checkbox mc4wp-checkbox-wp-comment-form"><label><input type="checkbox" name="_mc4wp_subscribe_wp-comment-form" value="1" checked="checked"><span>Sign me up for the newsletter!</span></label></p><div class="comment-sub-ops" data-auto="position"><label for="comment-mail-sub-type" class="cso-sub-type"> <span class="cso-icon"><svg style="width:1em; height:1em; vertical-align:middle;" viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg"> <g fill="currentColor" fill-rule="evenodd"> <path d="M14.1,5.63571636 C14.9517714,6.33967604 15.450459,7.19287046 15.450459,8.11238878 C15.450459,9.00675525 14.9786798,9.83837654 14.1691007,10.5309611 L15.9373937,14.0087185 L12.3204301,12.0078104 C11.9296094,13.5858368 9.54844584,14.7997638 6.66936474,14.7997638 C5.53232152,14.7997638 4.47293941,14.6104254 3.58314938,14.2840966 L3.58314938,14.2840966 L0.600000024,15.934378 L1.91489821,13.3483263 C1.31289726,12.8333222 0.962083376,12.2149306 0.962083376,11.549882 C0.962083376,11.165606 1.07921023,10.7969075 1.29424428,10.4547307 L1.29424428,10.4547307 C0.538036753,9.77771086 0.100000001,8.97417858 0.100000001,8.11238878 C0.100000001,7.04123575 0.776722924,6.06008476 1.89999998,5.30000019 L1.89999998,7.0658888 C1.89999998,7.30870143 2.09163284,7.50553995 2.34867325,7.50553995 L13.6513267,7.50553995 C13.8991221,7.50553995 14.1,7.31362877 14.1,7.0658888 L14.1,5.63571636 L14.1,5.63571636 Z M1.91455086,10.9345943 C1.80464172,11.1556337 1.74596704,11.3882813 1.74596704,11.6284523 C1.74596704,12.1628789 2.03649339,12.660053 2.53556999,13.0749705 L1.89355472,14.5590821 L3.60073421,13.7061116 L3.60073421,13.7061116 C4.4110062,14.0513606 5.42865146,14.2569046 6.53374306,14.2569046 C8.94591699,14.2569046 10.9414496,13.2775827 11.2731076,12.0036603 C10.2241563,12.3100096 9.03514487,12.482874 7.77522952,12.482874 C5.42553187,12.482874 3.3224447,11.8816356 1.91455086,10.9345943 L1.91455086,10.9345943 Z M3.03674893,0 C2.79553911,0 2.5999999,0.198275445 2.5999999,0.450938832 L2.5999999,6.42178844 C2.5999999,6.67083508 2.80610042,6.87272727 3.03674893,6.87272727 L12.9632509,6.87272727 C13.2044607,6.87272727 13.3999999,6.67445183 13.3999999,6.42178844 L13.3999999,0.450938832 C13.3999999,0.201892192 13.1938994,0 12.9632509,0 L3.03674893,0 Z M7.99999989,4.5999999 L12.5,0.600000013 L11.5625,0.600000013 L7.99999989,2.78181813 L4.43749976,0.600000013 L3.5,0.599999905 L7.99999989,4.5999999 Z"></path> </g> </svg></span> Receive Email Notifications? </label><select id="comment-mail-sub-type" name="comment_mail_sub_type" class="cso-sub-type form-control" title="Receive Notifications?"><option value="" selected="selected">no, do not subscribe</option><option value="comment">yes, replies to my comment</option><option value="comments">yes, all comments/replies</option> </select> <select id="comment-mail-sub-deliver" name="comment_mail_sub_deliver" class="cso-sub-deliver form-control" title="Notify Me"><option value="asap" selected="selected">instantly</option><option value="hourly">hourly digest</option><option value="daily">daily digest</option><option value="weekly">weekly digest</option> </select><div class="cso-links"> <span class="cso-link-new">Or, you can <a href="https://www.javacodegeeks.com/?comment_mail%5Bmanage%5D%5Bsub_new%5D=0&amp;comment_mail%5Bmanage%5D%5Bsub_form%5D%5Bpost_id%5D=44888" rel="nofollow">subscribe without commenting</a>.</span></div></div><style type="text/css">.comment-sub-ops{margin:1em
0 1em 0}.comment-sub-ops
label{display:block}.comment-sub-ops
select{box-sizing:border-box;display:inline-block}.comment-sub-ops select.cso-sub-type{width:70%;float:left}.comment-sub-ops select.cso-sub-deliver{width:28%;float:right}.comment-sub-ops select.cso-sub-deliver[disabled]{opacity:0.3}.comment-sub-ops .cso-links{font-size:80%;line-height:1.5em;margin:0
0 0 .5em;clear:both}.comment-sub-ops .cso-links .cso-link-summary{display:block;line-height:1em}.comment-sub-ops .cso-sub-list{margin:1em
0 0 0}.comment-sub-ops .cso-sub-list
label{cursor:pointer}</style><p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="44888" id="comment_post_ID"> <input type="hidden" name="comment_parent" id="comment_parent" value="0"></p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="30fd4efaad"></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="0"></p></form></div></div></div></div> <aside class="sidebar"><div id="text-html-widget-2" class="text-html-box"><div id="div-gpt-ad-1415445260332-3" style="width:300px; height:250px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-3');});</script> <div id="google_ads_iframe_/70432299/JCG_Side_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_Side_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_Side_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource(3).html"></iframe></div></div></div><div id="text-html-widget-3" class="text-html-box"><div id="div-gpt-ad-1415445260332-4" style="width:300px; height:250px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-4');});</script> <div id="google_ads_iframe_/70432299/JCG_Side_1_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_Side_1_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_Side_1_0" width="300" height="250" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource(4).html"></iframe></div></div></div><div id="mc4wp_form_widget-3" class="widget widget_mc4wp_form_widget"><div class="widget-top"><h4>Newsletter</h4><div class="stripe-line"></div></div><div class="widget-container"><script type="text/javascript">(function(){if(!window.mc4wp){window.mc4wp={listeners:[],forms:{on:function(event,callback){window.mc4wp.listeners.push({event:event,callback:callback});}}}}})();</script><form id="mc4wp-form-3" class="mc4wp-form mc4wp-form-28645 mc4wp-form-theme mc4wp-form-theme-red mc4wp-ajax" method="post" data-id="28645" data-name="Sidebar"><div class="mc4wp-form-fields"><div style="padding: 15px 15px 15px; background: url(&#39;/wp-content/uploads/2014/11/newsletter-bg.jpg&#39;) no-repeat; background-color: rgb(252, 252, 252);"><span style="text-shadow: 1px 1px #D0D0D0; font-weight: bold; font-size: 14pt; display: inline;">179,260</span> insiders are already enjoying weekly updates and complimentary whitepapers!<p> <span style="text-shadow: 1px 1px #D0D0D0; font-weight: bold; font-size: 14pt; display: inline;">Join them now</span> to gain <span style="text-decoration: underline;  font-size: 14pt;">exclusive access</span> to the latest news in the Java world, as well as insights about Android, Scala, Groovy and other related technologies.</p><p> <label for="mc4wp_email"><span style="font-weight: bold; font-size: 13pt;">Email address: </span></label> <input type="email" id="mc4wp_email" name="EMAIL" required="" placeholder="Your email address"></p> <input type="submit" value="Sign up"></div><div style="display: none;"><input type="text" name="_mc4wp_honeypot" value="" tabindex="-1" autocomplete="off"></div><input type="hidden" name="_mc4wp_timestamp" value="1496622076"><input type="hidden" name="_mc4wp_form_id" value="28645"><input type="hidden" name="_mc4wp_form_element_id" value="mc4wp-form-3"></div><div class="mc4wp-response"></div></form></div></div><div id="wpjb-recent-jobs-2" class="widget widget_wpjb-recent-jobs"><div class="widget-top"><h4>Recent Jobs</h4><div class="stripe-line"></div></div><div class="widget-container"><div class="wpjb wpjb-widget"><div class="wpjb-grid wpjb-grid-compact wpjb-grid-closed-top"><div class="wpjb-grid-row"><div class="wpjb-col-100"> <span class="wpjb-widget-grid-link"><a href="https://www.javacodegeeks.com/job/software-developer-in-bracknell-uk/">Software Developer in Bracknell (UK)</a></span><br> <span class="wpjb-sub">Bracknell, United Kingdom <span class="wpjb-glyphs wpjb-icon-location"></span></span></div></div><div class="wpjb-grid-row"><div class="wpjb-col-100"> <span class="wpjb-widget-grid-link"><a href="https://www.javacodegeeks.com/job/software-engineer-service-provider/">Software Engineer – Service Provider</a></span><br> <span class="wpjb-sub">Bracknell, United Kingdom <span class="wpjb-glyphs wpjb-icon-location"></span></span></div></div><div class=""><div class="wpjb-col-100"> <span class="wpjb-widget-grid-link wpjb-widget-recent-jobs-all"> <a class="wpjb-link-view-all" href="https://www.javacodegeeks.com/jobs/">View All</a> <span class="wpjb-glyphs wpjb-icon-right-open"></span> </span></div></div></div></div></div></div><div id="text-html-widget-5" class="widget text-html"><div class="widget-top"><h4>Join Us</h4><div class="stripe-line"></div></div><div class="widget-container"><div><div style="width:150px; height:150px; float:left; margin-top:-10px; margin-left:-10px;"> <img title="Join Us" alt="Join Us" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/w4g-badge-150x150.png" width="150" height="150"></div> With <label style="border:1px solid #D8D8D8;background:#F0F0F0;border-radius:3px;-moz-border-radius:3px;text-shadow: 1px 1px #D0D0D0;text-align:center;font-weight:bold;padding-left:3px;padding-right:3px">1,240,600</label> monthly unique visitors and over <label style="border:1px solid #D8D8D8;background:#F0F0F0;border-radius:3px;-moz-border-radius:3px;text-shadow: 1px 1px #D0D0D0;text-align:center;font-weight:bold;padding-left:3px;padding-right:3px">500</label> authors we are placed among the top Java related sites around. Constantly being on the lookout for partners; we encourage you to join us. So If you have a blog with unique and interesting content then you should check out our <strong><a href="http://www.javacodegeeks.com/join-us/jcg">JCG</a></strong> partners program. You can also be a <strong><a href="http://www.javacodegeeks.com/join-us/w4g">guest writer</a></strong> for Java Code Geeks and hone your writing skills!</div><div class="clear"></div></div></div><div id="text-html-widget-4" class="text-html-box"><div id="div-gpt-ad-1415445260332-6" style="width:300px; height:600px;"> <script type="text/javascript">googletag.cmd.push(function(){googletag.display('div-gpt-ad-1415445260332-6');});</script> <div id="google_ads_iframe_/70432299/JCG_Side_2_0__container__" style="border: 0pt none;"><iframe id="google_ads_iframe_/70432299/JCG_Side_2_0" title="3rd party ad content" name="google_ads_iframe_/70432299/JCG_Side_2_0" width="300" height="600" scrolling="no" marginwidth="0" marginheight="0" frameborder="0" style="border: 0px; vertical-align: bottom;" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/saved_resource(5).html"></iframe></div></div></div> </aside><div class="clear"></div><div class="clear"></div></div></div><footer id="theme-footer" class="fade-in animated4"><div id="footer-widget-area" class="wide-right-3c container"><div id="footer-first" class="footer-widgets-box"><div id="linkcat-4" class="footer-widget widget_links"><div class="footer-widget-top"><h4>Knowledge Base</h4></div><div class="footer-widget-container"><ul class="xoxo blogroll"><li><a href="http://www.javacodegeeks.com/courses/" target="_blank">Courses</a></li><li><a href="http://examples.javacodegeeks.com/" target="_blank">Examples</a></li><li><a href="http://www.javacodegeeks.com/p/resources.html" target="_blank">Resources</a></li><li><a href="http://www.javacodegeeks.com/tutorials/" target="_blank">Tutorials</a></li><li><a href="http://www.javacodegeeks.com/whitepaper/" target="_blank">Whitepapers</a></li></ul></div></div><div id="linkcat-3" class="footer-widget widget_links"><div class="footer-widget-top"><h4>Partners</h4></div><div class="footer-widget-container"><ul class="xoxo blogroll"><li><a href="http://www.mkyong.com/" target="_blank">Mkyong</a></li></ul></div></div><div id="linkcat-5" class="footer-widget widget_links"><div class="footer-widget-top"><h4>The Code Geeks Network</h4></div><div class="footer-widget-container"><ul class="xoxo blogroll"><li><a href="http://www.dotnetcodegeeks.com/" target="_blank">.NET Code Geeks</a></li><li><a href="http://www.javacodegeeks.com/" target="_blank">Java Code Geeks</a></li><li><a href="http://www.systemcodegeeks.com/" target="_blank">System Code Geeks</a></li><li><a href="http://www.webcodegeeks.com/" target="_blank">Web Code Geeks</a></li></ul></div></div></div><div id="footer-second" class="footer-widgets-box"><div id="linkcat-652" class="footer-widget widget_links"><div class="footer-widget-top"><h4>Hall Of Fame</h4></div><div class="footer-widget-container"><ul class="xoxo blogroll"><li><a href="http://www.javacodegeeks.com/2010/10/android-full-application-tutorial.html" target="_blank">“Android Full Application Tutorial” series</a></li><li><a href="http://www.javacodegeeks.com/2013/01/15-online-learning-websites-that-you-should-check-out.html" target="_blank">11 Online Learning websites that you should check out</a></li><li><a href="http://www.javacodegeeks.com/2013/04/advantages-and-disadvantages-of-cloud-computing-cloud-computing-pros-and-cons.html" target="_blank">Advantages and Disadvantages of Cloud Computing – Cloud computing pros and cons</a></li><li><a href="http://www.javacodegeeks.com/2011/02/android-google-maps-tutorial.html" target="_blank">Android Google Maps Tutorial</a></li><li><a href="http://www.javacodegeeks.com/2011/01/android-json-parsing-gson-tutorial.html" target="_blank">Android JSON Parsing with Gson Tutorial</a></li><li><a href="http://www.javacodegeeks.com/2010/09/android-location-based-services.html" target="_blank">Android Location Based Services Application – GPS location</a></li><li><a href="http://www.javacodegeeks.com/2011/01/android-quick-preferences-tutorial.html" target="_blank">Android Quick Preferences Tutorial</a></li><li><a href="http://www.javacodegeeks.com/2013/03/difference-between-comparator-and-comparable-in-java.html" target="_blank">Difference between Comparator and Comparable in Java</a></li><li><a href="http://www.javacodegeeks.com/2010/05/gwt-2-spring-3-jpa-2-hibernate-35-2.html" target="_blank">GWT 2 Spring 3 JPA 2 Hibernate 3.5 Tutorial</a></li><li><a href="http://www.javacodegeeks.com/2010/08/java-best-practices-vector-arraylist.html" target="_blank">Java Best Practices – Vector vs ArrayList vs HashSet</a></li></ul></div></div></div><div id="footer-third" class="footer-widgets-box"><div id="text-html-widget-7" class="footer-widget text-html"><div class="footer-widget-top"><h4>About Java Code Geeks</h4></div><div class="footer-widget-container"><div>JCGs (Java Code Geeks) is an independent online community focused on creating the ultimate Java to Java developers resource center; targeted at the technical architect, technical team lead (senior developer), project manager and junior developers alike. JCGs serve the Java, SOA, Agile and Telecom communities with daily news written by domain experts, articles, tutorials, reviews, announcements, code snippets and open source projects.</div><div class="clear"></div></div></div><div id="text-html-widget-8" class="footer-widget text-html"><div class="footer-widget-top"><h4>Disclaimer</h4></div><div class="footer-widget-container"><div>All trademarks and registered trademarks appearing on Java Code Geeks are the property of their respective owners. Java is a trademark or registered trademark of Oracle Corporation in the United States and other countries. Examples Java Code Geeks is not connected to Oracle Corporation and is not sponsored by Oracle Corporation.</div><div class="clear"></div></div></div></div></div><div class="clear"></div> </footer><div class="clear"></div><div class="footer-bottom fade-in animated4"><div class="container"><div class="social-icons icon_flat"> <a class="ttip" title="Rss" href="http://feeds.feedburner.com/JavaCodeGeeks" target="_blank"><i class="tieicon-rss"></i></a><a class="ttip" title="Google+" href="https://plus.google.com/+JavaCodeGeeks/" target="_blank"><i class="tieicon-gplus"></i></a><a class="ttip" title="Facebook" href="https://www.facebook.com/javacodegeeks" target="_blank"><i class="tieicon-facebook"></i></a><a class="ttip" title="Twitter" href="https://twitter.com/javacodegeeks" target="_blank"><i class="tieicon-twitter"></i></a><a class="ttip" title="LinkedIn" href="https://www.linkedin.com/groups/Java-Code-Geeks-3810709" target="_blank"><i class="tieicon-linkedin"></i></a><a class="ttip" title="Github" href="https://github.com/javacodegeeks/" target="_blank"><i class="tieicon-github"></i></a></div><div class="alignleft"> Java Code Geeks and all content copyright © 2010-2017,  <a href="http://www.exelixismedia.com/">Exelixis Media P.C.</a> | <a href="http://www.javacodegeeks.com/about/terms-of-use/">Terms of Use</a> | <a href="http://www.javacodegeeks.com/about/privacy-policy/">Privacy Policy</a> | <a href="https://www.javacodegeeks.com/cdn-cgi/l/email-protection#3a494f4a4a55484e7a505b4c5b59555e5f5d5f5f514914595557">Contact</a></div></div></div></div><div id="topcontrol" class="tieicon-up-open" title="Scroll To Top"></div><div id="fb-root"></div><div id="um_upload_single" style="display:none"></div><div id="um_view_photo" style="display:none"><a href="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#" data-action="um_remove_modal" class="um-modal-close"><i class="um-faicon-times"></i></a><div class="um-modal-body photo"><div class="um-modal-photo"></div></div></div> <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');ga('create','UA-12271632-2','auto');ga('send','pageview');</script>  <script type="text/javascript">window.cookieconsent_options={"message":"We use cookies to ensure that we give you the best experience on our website. If you continue to use this site, you agree to our use of cookies","dismiss":"Got it!","learnMore":"More info","link":"about/privacy-policy/","theme":"light-floating"};</script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/cookieconsent.min.js"></script>  <script>var snp_f=[];var snp_hostname=new RegExp(location.host);var snp_http=new RegExp("^(http|https)://","i");var snp_cookie_prefix='';var snp_separate_cookies=false;var snp_ajax_url='https://www.javacodegeeks.com/wp-admin/admin-ajax.php';var snp_ignore_cookies=false;var snp_enable_analytics_events=true;var snp_enable_mobile=true;var snp_use_in_all=false;var snp_excluded_urls=[];snp_excluded_urls.push('');</script> <div class="snp-root"> <input type="hidden" id="snp_popup" value=""> <input type="hidden" id="snp_popup_id" value=""> <input type="hidden" id="snp_popup_theme" value=""> <input type="hidden" id="snp_exithref" value=""> <input type="hidden" id="snp_exittarget" value=""><div id="snppopup-welcome" class="snp-pop-59902 snppopup"><input type="hidden" class="snp_open" value="load"><input type="hidden" class="snp_show_on_exit" value="2"><input type="hidden" class="snp_exit_js_alert_text" value=""><input type="hidden" class="snp_open_after" value="5"><input type="hidden" class="snp_open_scroll" value="10"><input type="hidden" class="snp_optin_redirect_url" value=""><input type="hidden" class="snp_show_cb_button" value="yes"><input type="hidden" class="snp_popup_id" value="59902"><input type="hidden" class="snp_popup_theme" value="builder"><input type="hidden" class="snp_overlay" value="default"><input type="hidden" class="snp_cookie_conversion" value="30"><input type="hidden" class="snp_cookie_close" value="5"><div class="snp-builder"><div class="snp-bld-step-cont snp-bld-step-cont-1 snp-bld-center"><div id="snp-bld-step-1" data-width="800" data-height="500" class="snp-bld-step snp-bld-step-1  animated bounceInDown " data-animation="bounceInDown"><form action="https://www.javacodegeeks.com/2015/11/mocks-spies-partial-mocks-and-stubbing.html#" method="post" class="snp-subscribeform snp_subscribeform"><div class="bld-el-cont bld-el-text bld-step-1-el-0 "><div class="bld-el  "><p style="text-align: center;"><strong><span style="font-size: 26px;">Want to take your Java skills to the next level?</span></strong></p></div></div><div class="bld-el-cont bld-el-text bld-step-1-el-1 "><div class="bld-el  "><p style="text-align: center;"><span style="font-size: 18px;">Grab our programming books for <strong>FREE</strong>!</span></p></div></div><div class="bld-el-cont bld-el-text bld-step-1-el-2 "><div class="bld-el  "><p>Here are some of the eBooks you will get:</p></div></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-3  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>Spring Interview QnA</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-4  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>Multithreading &amp; Concurrency QnA</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-5  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>JPA Minibook</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-6  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>JVM Troubleshooting Guide</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-7  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>Advanced Java</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-8  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>Java Interview QnA</li></ul></div><div class="bld-el-cont bld-el-pointlist bld-step-1-el-9  animated fadeIn" data-animation="fadeIn"><ul class="bld-el  "><li>Java Design Patterns</li></ul></div><div class="bld-el-cont bld-el-input bld-step-1-el-10  animated bounceIn bld-icon" data-animation="bounceIn"><span class="bld-input-icon"><i class="fa fa-envelope"></i></span><div class="bld-table-cont"><input placeholder="Your email address" required="" name="email" value="" class="bld-el  "></div></div><div class="bld-el-cont bld-el-button bld-step-1-el-11  animated bounceIn" data-animation="bounceIn"><button class="bld-el   snp-submit snp-cursor-pointer" data-loading="&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;" type="submit">Get the Books <i style="margin-left: 15px;" class="fa fa-arrow-right"></i></button></div><div class="bld-el-cont bld-el-button bld-step-1-el-12  animated bounceIn" data-animation="bounceIn"><button class="bld-el   snp-close-link snp-cursor-pointer" data-loading="&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;" type="button">No Thanks!</button></div><div class="bld-el-cont bld-el-img bld-step-1-el-13  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/Spring-Interview-Questions_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-14  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/Multithreading-and-Concurrency-Questions_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-15  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/jpa-tutorial_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-16  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/JVM_Troubleshooting_Guide_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-17  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/Advanced_Java_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-18  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/Java-Interview-Questions_book_lp.png"></div><div class="bld-el-cont bld-el-img bld-step-1-el-19  animated bounceInLeft" data-animation="bounceInLeft"><img class="bld-el  " src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/java_design_patterns_book_lp.png"></div><div class="bld-el-cont bld-el-button bld-step-1-el-20  animated fadeIn" data-animation="fadeIn"><button class="bld-el   snp-close-link snp-cursor-pointer" data-loading="&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;" type="button">Close Popup</button></div></form></div></div></div><div class="snp-overlay" id="snp-pop-59902-overlay"></div><script>var snp_bld_open59902=function(){_snp_bld_open(59902);}
var snp_bld_close59902=function(){_snp_bld_close(59902);}</script> <style>.snp-pop-59902 .snp-bld-step-cont-1{}.snp-pop-59902 .snp-bld-step-1{width:800px;height:500px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-0{border:1px
solid transparent;width:413px;height:70px;top:9px;left:380px;z-index:100}.snp-pop-59902 .bld-step-1-el-0 .bld-el,.snp-pop-59902 .bld-step-1-el-0 .bld-el p,.snp-pop-59902 .bld-step-1-el-0 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-0 .bld-el:active,.snp-pop-59902 .bld-step-1-el-0 .bld-el:hover{outline:0;font-family:Open Sans;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-1{border:1px
solid transparent;width:255px;height:50px;top:93px;left:455px;z-index:100}.snp-pop-59902 .bld-step-1-el-1 .bld-el,.snp-pop-59902 .bld-step-1-el-1 .bld-el p,.snp-pop-59902 .bld-step-1-el-1 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-1 .bld-el:active,.snp-pop-59902 .bld-step-1-el-1 .bld-el:hover{outline:0;font-family:Open Sans;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-2{border:1px
solid transparent;width:336px;height:29px;top:155px;left:427px;z-index:100}.snp-pop-59902 .bld-step-1-el-2 .bld-el,.snp-pop-59902 .bld-step-1-el-2 .bld-el p,.snp-pop-59902 .bld-step-1-el-2 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-2 .bld-el:active,.snp-pop-59902 .bld-step-1-el-2 .bld-el:hover{outline:0;font-family:Open Sans;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-3{border:1px
solid transparent;width:320px;height:19px;top:184px;left:428px;z-index:100;-webkit-animation-delay:2000ms;animation-delay:2000ms}.snp-pop-59902 .bld-step-1-el-3 .bld-el,.snp-pop-59902 .bld-step-1-el-3 .bld-el p,.snp-pop-59902 .bld-step-1-el-3 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-3 .bld-el:active,.snp-pop-59902 .bld-step-1-el-3 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-3 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-4{border:1px
solid transparent;width:320px;height:19px;top:203px;left:428px;z-index:100;-webkit-animation-delay:3000ms;animation-delay:3000ms}.snp-pop-59902 .bld-step-1-el-4 .bld-el,.snp-pop-59902 .bld-step-1-el-4 .bld-el p,.snp-pop-59902 .bld-step-1-el-4 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-4 .bld-el:active,.snp-pop-59902 .bld-step-1-el-4 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-4 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-5{border:1px
solid transparent;width:320px;height:19px;top:222px;left:428px;z-index:100;-webkit-animation-delay:4000ms;animation-delay:4000ms}.snp-pop-59902 .bld-step-1-el-5 .bld-el,.snp-pop-59902 .bld-step-1-el-5 .bld-el p,.snp-pop-59902 .bld-step-1-el-5 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-5 .bld-el:active,.snp-pop-59902 .bld-step-1-el-5 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-5 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-6{border:1px
solid transparent;width:320px;height:19px;top:241px;left:428px;z-index:100;-webkit-animation-delay:5000ms;animation-delay:5000ms}.snp-pop-59902 .bld-step-1-el-6 .bld-el,.snp-pop-59902 .bld-step-1-el-6 .bld-el p,.snp-pop-59902 .bld-step-1-el-6 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-6 .bld-el:active,.snp-pop-59902 .bld-step-1-el-6 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-6 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-7{border:1px
solid transparent;width:320px;height:19px;top:260px;left:428px;z-index:100;-webkit-animation-delay:6000ms;animation-delay:6000ms}.snp-pop-59902 .bld-step-1-el-7 .bld-el,.snp-pop-59902 .bld-step-1-el-7 .bld-el p,.snp-pop-59902 .bld-step-1-el-7 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-7 .bld-el:active,.snp-pop-59902 .bld-step-1-el-7 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-7 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-8{border:1px
solid transparent;width:200px;height:19px;top:279px;left:428px;z-index:100;-webkit-animation-delay:7000ms;animation-delay:7000ms}.snp-pop-59902 .bld-step-1-el-8 .bld-el,.snp-pop-59902 .bld-step-1-el-8 .bld-el p,.snp-pop-59902 .bld-step-1-el-8 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-8 .bld-el:active,.snp-pop-59902 .bld-step-1-el-8 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-8 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-9{border:1px
solid transparent;width:320px;height:19px;top:298px;left:428px;z-index:100;-webkit-animation-delay:8000ms;animation-delay:8000ms}.snp-pop-59902 .bld-step-1-el-9 .bld-el,.snp-pop-59902 .bld-step-1-el-9 .bld-el p,.snp-pop-59902 .bld-step-1-el-9 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-9 .bld-el:active,.snp-pop-59902 .bld-step-1-el-9 .bld-el:hover{outline:0;font-family:Open Sans;font-size:14px;border-width:0px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-9 ul.bld-el
li{line-height:normal;padding-left:15px;background-image:url("/wp-content/plugins/arscode-ninja-popups/img/dot.png")}.snp-pop-59902 .bld-step-1-el-10{border:1px
solid transparent;width:415px;height:50px;top:339px;left:380px;z-index:100;-webkit-animation-delay:9000ms;animation-delay:9000ms}.snp-pop-59902 .bld-step-1-el-10 .bld-el,.snp-pop-59902 .bld-step-1-el-10 .bld-el p,.snp-pop-59902 .bld-step-1-el-10 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-10 .bld-el:active,.snp-pop-59902 .bld-step-1-el-10 .bld-el:hover{outline:0;height:48px;font-family:Open Sans;font-size:14px;border-style:solid;border-width:1px;border-color:#197fd2;border-radius:5px;padding:5px;background-position:center center;background-repeat:repeat}.snp-pop-59902 .bld-step-1-el-10 .bld-el::-webkit-input-placeholder{color: }.snp-pop-59902 .bld-step-1-el-10 .bld-el::-moz-placeholder{color: }.snp-pop-59902 .bld-step-1-el-10.bld-icon .bld-input-icon{border-right-width:0 !important;width:px;font-size:20px;border-style:solid;border-width:1px;border-color:#197fd2;border-radius:5px;background-color:#197fd2}.snp-pop-59902 .bld-step-1-el-11{border:1px
solid transparent;width:200px;height:60px;top:400px;left:384px;z-index:100;-webkit-animation-delay:9000ms;animation-delay:9000ms}.snp-pop-59902 .bld-step-1-el-11 .bld-el,.snp-pop-59902 .bld-step-1-el-11 .bld-el p,.snp-pop-59902 .bld-step-1-el-11 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-11 .bld-el:active,.snp-pop-59902 .bld-step-1-el-11 .bld-el:hover{outline:0;color:#fff;font-family:Open Sans;font-size:20px;font-weight:bold;border-style:none;border-width:0px;border-radius:5px;background-color:#197FD2 !important;background-position:center center;background-repeat:repeat;padding-left:10px}.snp-pop-59902 .bld-step-1-el-12{border:1px
solid transparent;width:200px;height:60px;top:400px;left:591px;z-index:100;-webkit-animation-delay:9000ms;animation-delay:9000ms}.snp-pop-59902 .bld-step-1-el-12 .bld-el,.snp-pop-59902 .bld-step-1-el-12 .bld-el p,.snp-pop-59902 .bld-step-1-el-12 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-12 .bld-el:active,.snp-pop-59902 .bld-step-1-el-12 .bld-el:hover{outline:0;color:#fff;font-family:Open Sans;font-size:20px;font-weight:bold;border-style:none;border-width:0px;border-radius:5px;background-color:#5b5b5b !important;background-position:center center;background-repeat:repeat;padding-left:10px}.snp-pop-59902 .bld-step-1-el-13{border:1px
solid transparent;width:265px;height:397px;top:3px;left:-56px;z-index:100;-webkit-animation-delay:2000ms;animation-delay:2000ms}.snp-pop-59902 .bld-step-1-el-13 .bld-el,.snp-pop-59902 .bld-step-1-el-13 .bld-el p,.snp-pop-59902 .bld-step-1-el-13 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-13 .bld-el:active,.snp-pop-59902 .bld-step-1-el-13 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-14{border:1px
solid transparent;width:265px;height:397px;top:21px;left:-30px;z-index:100;-webkit-animation-delay:3000ms;animation-delay:3000ms}.snp-pop-59902 .bld-step-1-el-14 .bld-el,.snp-pop-59902 .bld-step-1-el-14 .bld-el p,.snp-pop-59902 .bld-step-1-el-14 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-14 .bld-el:active,.snp-pop-59902 .bld-step-1-el-14 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-15{border:1px
solid transparent;width:265px;height:397px;top:42px;left:0px;z-index:100;-webkit-animation-delay:4000ms;animation-delay:4000ms}.snp-pop-59902 .bld-step-1-el-15 .bld-el,.snp-pop-59902 .bld-step-1-el-15 .bld-el p,.snp-pop-59902 .bld-step-1-el-15 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-15 .bld-el:active,.snp-pop-59902 .bld-step-1-el-15 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-16{border:1px
solid transparent;width:265px;height:397px;top:62px;left:28px;z-index:100;-webkit-animation-delay:5000ms;animation-delay:5000ms}.snp-pop-59902 .bld-step-1-el-16 .bld-el,.snp-pop-59902 .bld-step-1-el-16 .bld-el p,.snp-pop-59902 .bld-step-1-el-16 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-16 .bld-el:active,.snp-pop-59902 .bld-step-1-el-16 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-17{border:1px
solid transparent;width:265px;height:397px;top:81px;left:58px;z-index:100;-webkit-animation-delay:6000ms;animation-delay:6000ms}.snp-pop-59902 .bld-step-1-el-17 .bld-el,.snp-pop-59902 .bld-step-1-el-17 .bld-el p,.snp-pop-59902 .bld-step-1-el-17 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-17 .bld-el:active,.snp-pop-59902 .bld-step-1-el-17 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-18{border:1px
solid transparent;width:265px;height:397px;top:100px;left:88px;z-index:100;-webkit-animation-delay:7000ms;animation-delay:7000ms}.snp-pop-59902 .bld-step-1-el-18 .bld-el,.snp-pop-59902 .bld-step-1-el-18 .bld-el p,.snp-pop-59902 .bld-step-1-el-18 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-18 .bld-el:active,.snp-pop-59902 .bld-step-1-el-18 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-19{border:1px
solid transparent;width:265px;height:397px;top:121px;left:118px;z-index:100;-webkit-animation-delay:8000ms;animation-delay:8000ms}.snp-pop-59902 .bld-step-1-el-19 .bld-el,.snp-pop-59902 .bld-step-1-el-19 .bld-el p,.snp-pop-59902 .bld-step-1-el-19 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-19 .bld-el:active,.snp-pop-59902 .bld-step-1-el-19 .bld-el:hover{outline:0}.snp-pop-59902 .bld-step-1-el-20{border:1px
solid transparent;width:127px;height:26px;top:466px;left:520px;z-index:100;-webkit-animation-delay:750ms;animation-delay:750ms}.snp-pop-59902 .bld-step-1-el-20 .bld-el,.snp-pop-59902 .bld-step-1-el-20 .bld-el p,.snp-pop-59902 .bld-step-1-el-20 .bld-el:focus,.snp-pop-59902 .bld-step-1-el-20 .bld-el:active,.snp-pop-59902 .bld-step-1-el-20 .bld-el:hover{outline:0;color:#d33;font-family:Open Sans;font-size:14px;font-weight:bold;border-style:none;border-width:0px;background-color:#fafafa !important;background-position:center center;background-repeat:repeat}#snp-pop-59902-overlay{opacity:1;background-color:#fafafa}</style><script>snp_f['snppopup-welcome-open']=snp_bld_open59902;snp_f['snppopup-welcome-close']=snp_bld_close59902;</script></div></div> <script type="text/javascript">/*<![CDATA[*/(function(){function addEventListener(element,event,handler){if(element.addEventListener){element.addEventListener(event,handler,false);}else if(element.attachEvent){element.attachEvent('on'+event,handler);}}function maybePrefixUrlField(){if(this.value.trim()!==''&&this.value.indexOf('http')!==0){this.value="http://"+this.value;}}
var urlFields=document.querySelectorAll('.mc4wp-form input[type="url"]');if(urlFields&&urlFields.length>0){for(var j=0;j<urlFields.length;j++){addEventListener(urlFields[j],'blur',maybePrefixUrlField);}}
var testInput=document.createElement('input');testInput.setAttribute('type','date');if(testInput.type!=='date'){var dateFields=document.querySelectorAll('.mc4wp-form input[type="date"]');for(var i=0;i<dateFields.length;i++){if(!dateFields[i].placeholder){dateFields[i].placeholder='YYYY-MM-DD';}
if(!dateFields[i].pattern){dateFields[i].pattern='[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])';}}}})();/*]]>*/</script> <link rel="stylesheet" id="font-Open+Sans-css" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/css(1)" type="text/css" media="all"> <script type="text/javascript">var qpprFrontData={"linkData":{"https:\/\/www.javacodegeeks.com\/2016\/12\/future-java-might-look-like.html":[0,0,""]},"siteURL":"https:\/\/www.javacodegeeks.com","siteURLq":"https:\/\/www.javacodegeeks.com"};</script> <script type="text/javascript">var tie={"go_to":"Go to...","ajaxurl":"https:\/\/www.javacodegeeks.com\/wp-admin\/admin-ajax.php","your_rating":"Your Rating:","is_singular":"1","reading_indicator":""};</script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/imagesloaded.min.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/masonry.min.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/jquery.masonry.min.js"></script> <script type="text/javascript">var um_scripts={"ajaxurl":"https:\/\/www.javacodegeeks.com\/wp-admin\/admin-ajax.php","fileupload":"https:\/\/www.javacodegeeks.com\/wp-content\/plugins\/ultimate-member\/core\/lib\/upload\/um-file-upload.php","imageupload":"https:\/\/www.javacodegeeks.com\/wp-content\/plugins\/ultimate-member\/core\/lib\/upload\/um-image-upload.php"};</script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/um.min.js"></script> <script type="text/javascript">var mc4wp_forms_config=[];</script> <script type="text/javascript">var mc4wp_ajax_vars={"loading_character":"\u2022","ajax_url":"https:\/\/www.javacodegeeks.com\/wp-admin\/admin-ajax.php?action=mc4wp-form","error_text":"Oops. Something went wrong. Please try again later."};</script> <!--[if lte IE 9]> <script type='text/javascript' src='//www.javacodegeeks.com/wp-content/plugins/mailchimp-for-wp/assets/js/third-party/placeholders.min.js'></script> <![endif]--> <script type="text/javascript">jQuery('#request').val('');</script> <script type="text/javascript">(function($)
{'use strict';$(document).ready(function()
{var $subOps=$('.comment-sub-ops'),$subType,$subDeliver;if($subOps.data('auto')==='position')$subOps.prevUntil('form').each(function()
{var $this=$(this);if($this.find(':input[type="submit"]').length)
{$subOps.remove(),$this.before($subOps);return false;}});$subOps=$('.comment-sub-ops'),$subType=$subOps.find('select.cso-sub-type'),$subDeliver=$subOps.find('select.cso-sub-deliver');$subType.on('change',function()
{if($(this).val()==='')
$subDeliver.attr('disabled','disabled');else $subDeliver.removeAttr('disabled');}).trigger('change');});})(jQuery);</script><script type="text/javascript">(function($)
{'use strict';$(document).ready(function()
{var $subOps=$('.comment-sub-ops'),$subType,$subDeliver;if($subOps.data('auto')==='position')$subOps.prevUntil('form').each(function()
{var $this=$(this);if($this.find(':input[type="submit"]').length)
{$subOps.remove(),$this.before($subOps);return false;}});$subOps=$('.comment-sub-ops'),$subType=$subOps.find('select.cso-sub-type'),$subDeliver=$subOps.find('select.cso-sub-deliver');$subType.on('change',function()
{if($(this).val()==='')
$subDeliver.attr('disabled','disabled');else $subDeliver.removeAttr('disabled');}).trigger('change');});})(jQuery);</script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shCore.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushBash.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushJava.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushScala.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushGroovy.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushSql.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushXml.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shBrushJScript.js"></script> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shAll.js"></script> <link rel="stylesheet" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shCore.css" type="text/css" media="all"><link rel="stylesheet" href="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/shThemeDefault.css" type="text/css" media="all"> <script type="text/javascript" src="./M2-Mocks, Spies, Partial Mocks and Stubbing _ Java Code Geeks - 2017_files/3f1ae.single.include-footer.3c5ccd.js"></script></body></html>